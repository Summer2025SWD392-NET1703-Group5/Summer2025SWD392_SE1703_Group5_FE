/**
 * Service th·ªëng nh·∫•t ƒë·ªÉ qu·∫£n l√Ω countdown timer cho booking
 * ƒê·∫£m b·∫£o ƒë·ªìng b·ªô gi·ªØa PaymentComponent v√† BookingHistory
 */

export interface CountdownData {
  bookingId: number;
  showtimeId: number;
  startTimestamp: number;
  duration: number; // seconds
  expiresAt: number;
}

class CountdownService {
  private static instance: CountdownService;
  private timers: Map<number, NodeJS.Timeout> = new Map();
  private callbacks: Map<number, (() => void)[]> = new Map();

  private constructor() {}

  static getInstance(): CountdownService {
    if (!CountdownService.instance) {
      CountdownService.instance = new CountdownService();
    }
    return CountdownService.instance;
  }

  /**
   * T·∫°o session key th·ªëng nh·∫•t cho booking timer
   */
  private getSessionKey(bookingId: number): string {
    return `booking_timer_${bookingId}`;
  }

  /**
   * Kh·ªüi t·∫°o ho·∫∑c l·∫•y countdown data cho booking
   */
  initCountdown(bookingId: number, showtimeId: number, duration: number = 5 * 60): CountdownData {
    const sessionKey = this.getSessionKey(bookingId);
    
    // Ki·ªÉm tra xem ƒë√£ c√≥ timer trong session storage ch∆∞a
    const existingData = sessionStorage.getItem(sessionKey);
    
    if (existingData) {
      try {
        const parsed: CountdownData = JSON.parse(existingData);
        console.log(`üîÑ [COUNTDOWN] S·ª≠ d·ª•ng timer hi·ªán c√≥ cho booking ${bookingId}:`, parsed);
        return parsed;
      } catch (error) {
        console.error(`‚ùå [COUNTDOWN] L·ªói parse timer data cho booking ${bookingId}:`, error);
      }
    }

    // T·∫°o timer m·ªõi
    const now = Date.now();
    const countdownData: CountdownData = {
      bookingId,
      showtimeId,
      startTimestamp: now,
      duration,
      expiresAt: now + (duration * 1000)
    };

    sessionStorage.setItem(sessionKey, JSON.stringify(countdownData));
    console.log(`‚úÖ [COUNTDOWN] T·∫°o timer m·ªõi cho booking ${bookingId}:`, countdownData);
    
    return countdownData;
  }

  /**
   * T√≠nh th·ªùi gian c√≤n l·∫°i (seconds)
   */
  getTimeLeft(bookingId: number): number {
    const sessionKey = this.getSessionKey(bookingId);
    const data = sessionStorage.getItem(sessionKey);

    if (!data) {
      console.warn(`‚ö†Ô∏è [COUNTDOWN] Kh√¥ng t√¨m th·∫•y timer data cho booking ${bookingId}`);
      return 0;
    }

    try {
      const countdownData: CountdownData = JSON.parse(data);
      const now = Date.now();
      const remaining = Math.max(0, countdownData.expiresAt - now);
      const timeLeftSeconds = Math.floor(remaining / 1000);

      // Debug log ƒë·ªÉ ki·ªÉm tra
      if (timeLeftSeconds > 600) { // N·∫øu > 10 ph√∫t th√¨ c√≥ v·∫•n ƒë·ªÅ
        console.warn(`üö® [COUNTDOWN] Timer b·∫•t th∆∞·ªùng cho booking ${bookingId}:`);
        console.warn(`  - now: ${now} (${new Date(now)})`);
        console.warn(`  - expiresAt: ${countdownData.expiresAt} (${new Date(countdownData.expiresAt)})`);
        console.warn(`  - remaining: ${remaining}ms`);
        console.warn(`  - timeLeft: ${timeLeftSeconds}s`);
        console.warn(`  - countdownData:`, countdownData);
      }

      return timeLeftSeconds;
    } catch (error) {
      console.error(`‚ùå [COUNTDOWN] L·ªói t√≠nh th·ªùi gian c√≤n l·∫°i cho booking ${bookingId}:`, error);
      return 0;
    }
  }

  /**
   * Ki·ªÉm tra xem timer ƒë√£ h·∫øt h·∫°n ch∆∞a
   */
  isExpired(bookingId: number): boolean {
    return this.getTimeLeft(bookingId) <= 0;
  }

  /**
   * Format th·ªùi gian th√†nh MM:SS
   */
  formatTime(seconds: number): string {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
  }

  /**
   * ƒêƒÉng k√Ω callback khi timer h·∫øt h·∫°n
   */
  onTimeout(bookingId: number, callback: () => void): void {
    if (!this.callbacks.has(bookingId)) {
      this.callbacks.set(bookingId, []);
    }
    this.callbacks.get(bookingId)!.push(callback);
  }

  /**
   * B·ªè ƒëƒÉng k√Ω callback
   */
  offTimeout(bookingId: number, callback: () => void): void {
    const callbacks = this.callbacks.get(bookingId);
    if (callbacks) {
      const index = callbacks.indexOf(callback);
      if (index > -1) {
        callbacks.splice(index, 1);
      }
    }
  }

  /**
   * B·∫Øt ƒë·∫ßu theo d√µi timer cho booking
   */
  startTimer(bookingId: number, onTick?: (timeLeft: number) => void): void {
    // Clear existing timer n·∫øu c√≥
    this.stopTimer(bookingId);

    const timer = setInterval(() => {
      const timeLeft = this.getTimeLeft(bookingId);
      
      // G·ªçi callback onTick n·∫øu c√≥
      if (onTick) {
        onTick(timeLeft);
      }

      // Ki·ªÉm tra h·∫øt h·∫°n
      if (timeLeft <= 0) {
        console.log(`‚è∞ [COUNTDOWN] Timer h·∫øt h·∫°n cho booking ${bookingId}`);
        
        // Clear timer
        this.stopTimer(bookingId);
        
        // Clear session storage
        this.clearTimer(bookingId);
        
        // G·ªçi t·∫•t c·∫£ callbacks
        const callbacks = this.callbacks.get(bookingId) || [];
        callbacks.forEach(callback => {
          try {
            callback();
          } catch (error) {
            console.error(`‚ùå [COUNTDOWN] L·ªói khi g·ªçi timeout callback cho booking ${bookingId}:`, error);
          }
        });
        
        // Clear callbacks
        this.callbacks.delete(bookingId);
      }
    }, 1000);

    this.timers.set(bookingId, timer);
    console.log(`üöÄ [COUNTDOWN] B·∫Øt ƒë·∫ßu timer cho booking ${bookingId}`);
  }

  /**
   * D·ª´ng timer cho booking
   */
  stopTimer(bookingId: number): void {
    const timer = this.timers.get(bookingId);
    if (timer) {
      clearInterval(timer);
      this.timers.delete(bookingId);
      console.log(`‚èπÔ∏è [COUNTDOWN] D·ª´ng timer cho booking ${bookingId}`);
    }
  }

  /**
   * X√≥a timer data kh·ªèi session storage
   */
  clearTimer(bookingId: number): void {
    const sessionKey = this.getSessionKey(bookingId);
    sessionStorage.removeItem(sessionKey);
    console.log(`üóëÔ∏è [COUNTDOWN] X√≥a timer data cho booking ${bookingId}`);
  }

  /**
   * X√≥a t·∫•t c·∫£ timers (cleanup)
   */
  clearAllTimers(): void {
    this.timers.forEach((timer, bookingId) => {
      clearInterval(timer);
      console.log(`üóëÔ∏è [COUNTDOWN] Cleanup timer cho booking ${bookingId}`);
    });

    this.timers.clear();
    this.callbacks.clear();
    console.log(`üßπ [COUNTDOWN] ƒê√£ cleanup t·∫•t c·∫£ timers`);
  }

  /**
   * Debug: Clear t·∫•t c·∫£ session storage timer data
   */
  clearAllSessionTimers(): void {
    const keys = Object.keys(sessionStorage);
    keys.forEach(key => {
      if (key.startsWith('booking_timer_')) {
        sessionStorage.removeItem(key);
        console.log(`üóëÔ∏è [COUNTDOWN] X√≥a session timer: ${key}`);
      }
    });
    console.log(`üßπ [COUNTDOWN] ƒê√£ x√≥a t·∫•t c·∫£ session timer data`);
  }

  /**
   * ƒê·ªìng b·ªô timer t·ª´ server (khi fetch booking history)
   * CH·ªà sync n·∫øu ch∆∞a c√≥ timer trong session storage
   */
  syncFromServer(bookingId: number, createdAt: string, showtimeId: number): boolean {
    const sessionKey = this.getSessionKey(bookingId);
    const existingData = sessionStorage.getItem(sessionKey);

    // N·∫øu ƒë√£ c√≥ timer (t·ª´ PaymentComponent), kh√¥ng ghi ƒë√®
    if (existingData) {
      console.log(`üîÑ [COUNTDOWN] Booking ${bookingId} ƒë√£ c√≥ timer, kh√¥ng sync t·ª´ server`);

      // Ch·ªâ ki·ªÉm tra xem timer hi·ªán t·∫°i c√≥ h·ª£p l·ªá kh√¥ng
      try {
        const parsed: CountdownData = JSON.parse(existingData);
        const timeLeft = this.getTimeLeft(bookingId);

        if (timeLeft <= 0) {
          console.log(`‚è∞ [COUNTDOWN] Timer hi·ªán t·∫°i ƒë√£ h·∫øt h·∫°n, x√≥a timer`);
          this.clearTimer(bookingId);
          return false;
        }

        console.log(`‚úÖ [COUNTDOWN] Timer hi·ªán t·∫°i c√≤n ${timeLeft}s, gi·ªØ nguy√™n`);
        return true;
      } catch (error) {
        console.error(`‚ùå [COUNTDOWN] Timer data b·ªã l·ªói, s·∫Ω t·∫°o m·ªõi t·ª´ server`);
        // Ti·∫øp t·ª•c t·∫°o timer m·ªõi t·ª´ server data
      }
    }

    // T·∫°o timer m·ªõi t·ª´ server data
    const createdTime = new Date(createdAt).getTime();
    const now = Date.now();
    const elapsed = now - createdTime;
    const duration = 5 * 60 * 1000; // 5 ph√∫t

    console.log(`üîç [COUNTDOWN] T·∫°o timer t·ª´ server cho booking ${bookingId}:`);
    console.log(`  - createdAt: ${createdAt}`);
    console.log(`  - createdTime: ${createdTime} (${new Date(createdTime)})`);
    console.log(`  - now: ${now} (${new Date(now)})`);
    console.log(`  - elapsed: ${elapsed}ms (${Math.floor(elapsed/1000)}s)`);
    console.log(`  - duration: ${duration}ms (${Math.floor(duration/1000)}s)`);

    // Ki·ªÉm tra xem booking c√≥ c√≤n trong th·ªùi h·∫°n kh√¥ng
    if (elapsed >= duration) {
      console.log(`‚è∞ [COUNTDOWN] Booking ${bookingId} ƒë√£ qu√° h·∫°n (${Math.floor(elapsed/1000)}s)`);
      this.clearTimer(bookingId);
      return false;
    }

    // T·∫°o timer data m·ªõi
    const countdownData: CountdownData = {
      bookingId,
      showtimeId,
      startTimestamp: createdTime,
      duration: Math.floor(duration / 1000),
      expiresAt: createdTime + duration
    };

    sessionStorage.setItem(sessionKey, JSON.stringify(countdownData));

    const timeLeft = Math.floor((countdownData.expiresAt - now) / 1000);
    console.log(`üîÑ [COUNTDOWN] T·∫°o timer t·ª´ server th√†nh c√¥ng:`);
    console.log(`  - expiresAt: ${countdownData.expiresAt} (${new Date(countdownData.expiresAt)})`);
    console.log(`  - timeLeft: ${timeLeft}s (${Math.floor(timeLeft/60)}:${(timeLeft%60).toString().padStart(2,'0')})`);

    return true;
  }
}

export default CountdownService.getInstance();
