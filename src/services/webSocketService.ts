// services/webSocketService.ts
import { io, Socket } from "socket.io-client";
import { toast } from "react-hot-toast";
import { sessionStorageService } from "./sessionStorageService";

// Types cho WebSocket events
export interface SeatSelectionEvent {
  showtimeId: string;
  seatId: string;
}

export interface SeatUpdateEvent {
  seatId: string;
  userId?: string;
  status: "available" | "selected" | "occupied";
  expiresAt?: string;
}

export interface SeatExpirationWarning {
  seatId: string;
  timeRemaining: number; // milliseconds
}

export interface SeatsStateEvent {
  seats: Array<{
    id: string;
    status: "available" | "selected" | "occupied";
    userId?: string;
    expiresAt?: string;
  }>;
}

export interface BookingConfirmationEvent {
  bookingId: string;
  seatIds: string[];
  totalPrice: number;
}

// WebSocket connection states
export type ConnectionState = "disconnected" | "connecting" | "connected" | "reconnecting" | "error";

// WebSocket service configuration
interface WebSocketConfig {
  url: string;
  reconnectAttempts: number;
  reconnectDelay: number;
  maxReconnectDelay: number;
  timeout: number;
}

// Default configuration
const DEFAULT_CONFIG: WebSocketConfig = {
  url: "http://localhost:3000",
  reconnectAttempts: 10,
  reconnectDelay: 1000,
  maxReconnectDelay: 30000,
  timeout: 20000,
};

/**
 * WebSocket Service cho real-time seat selection
 * Qu·∫£n l√Ω connection, authentication, v√† event handling
 */
class WebSocketService {
  private socket: Socket | null = null;
  private config: WebSocketConfig;
  private connectionState: ConnectionState = "disconnected";
  private reconnectAttempts = 0;
  private reconnectTimer: NodeJS.Timeout | null = null;
  private currentShowtimeId: string | null = null;
  private lastSeatCount: number | null = null;

  // Event listeners
  private eventListeners: Map<string, Set<Function>> = new Map();

  // Cross-tab communication
  private storageKey = "galaxy_cinema_seats";
  private broadcastChannel: BroadcastChannel | null = null;

  // Fallback mode khi WebSocket kh√¥ng available
  private fallbackMode = false;

  // Current user ID for session management
  private userId: string | null = null;

  constructor(config?: Partial<WebSocketConfig>) {
    this.config = { ...DEFAULT_CONFIG, ...config };
    console.log("üîå WebSocketService initialized v·ªõi config:", this.config);

    // üîÑ Setup cross-tab communication
    this.setupCrossTabSync();
  }

  /**
   * Setup cross-tab synchronization using BroadcastChannel
   */
  private setupCrossTabSync(): void {
    console.log(`üîÑ Setting up cross-tab sync (BroadcastChannel: ${typeof BroadcastChannel !== "undefined"})`);

    // üîß FORCE localStorage fallback for debugging
    this.setupStorageFallback();

    // Continue with normal setup...

    try {
      // üîÑ Initialize BroadcastChannel
      console.log(`üîß [SETUP] Creating BroadcastChannel: galaxy_cinema_seats`);
      this.broadcastChannel = new BroadcastChannel("galaxy_cinema_seats");
      console.log(`‚úÖ [SETUP] BroadcastChannel created successfully:`, this.broadcastChannel);

      // Listen for messages from other tabs
      const messageHandler = (event: MessageEvent) => {
        console.log(`üîß [BROADCAST_RECEIVE] Raw event received:`, event);
        const data = event.data;
        console.log(`üîß [BROADCAST_RECEIVE] Event data:`, data);

        // Check if data has required fields
        if (!data || typeof data !== "object") {
          console.warn(`‚ö†Ô∏è [BROADCAST_RECEIVE] Invalid cross-tab data:`, data);
          return;
        }

        // Only log important cross-tab events (not test messages)
        if (!data.test) {
          console.log(`üì° [BROADCAST_RECEIVE] Cross-tab ${data.action}: ${data.seatId} by user ${data.userId}`);
        }

        console.log(`üîß [BROADCAST_RECEIVE] Emitting cross-tab-seat-update event...`);
        this.emit("cross-tab-seat-update", {
          seatId: data.seatId,
          userId: data.userId,
          showtimeId: data.showtimeId,
          action: data.action,
          timestamp: data.timestamp,
        });
        console.log(`‚úÖ [BROADCAST_RECEIVE] cross-tab-seat-update event emitted`);
        console.log(`üîÑ [BROADCAST_RECEIVE] ===== END CROSS-TAB MESSAGE =====`);
      };

      console.log(`üîß [SETUP] Adding event listener to BroadcastChannel...`);
      this.broadcastChannel.addEventListener("message", messageHandler);
      console.log(`‚úÖ [SETUP] Event listener added to BroadcastChannel`);

      console.log("‚úÖ [SETUP] Cross-tab sync initialized v·ªõi BroadcastChannel");

      // üß™ Test BroadcastChannel immediately
      setTimeout(() => {
        console.log(`üß™ [TEST] Testing BroadcastChannel...`);
        this.testBroadcastChannel();
      }, 1000);
    } catch (error) {
      console.error("‚ùå [SETUP] BroadcastChannel setup failed:", error);
      console.warn("‚ö†Ô∏è [SETUP] BroadcastChannel kh√¥ng supported, fallback to localStorage");
      this.setupStorageFallback();
    }
  }

  /**
   * Fallback to localStorage for older browsers
   */
  private setupStorageFallback(): void {
    window.addEventListener("storage", (event) => {
      if (event.key === this.storageKey && event.newValue) {
        try {
          const data = JSON.parse(event.newValue);

          // Only log important cross-tab events (not test messages)
          if (!data.test) {
            console.log(`üì° Cross-tab ${data.action}: ${data.seatId} by user ${data.userId}`);
          }
          this.emit("cross-tab-seat-update", {
            seatId: data.seatId,
            userId: data.userId,
            showtimeId: data.showtimeId,
            action: data.action,
            timestamp: data.timestamp,
          });
          console.log(`‚úÖ [STORAGE_RECEIVE] cross-tab-seat-update event emitted`);
          console.log(`üîÑ [STORAGE_RECEIVE] ===== END CROSS-TAB MESSAGE =====`);
        } catch (error) {
          console.warn("‚ö†Ô∏è [STORAGE_RECEIVE] Failed to parse storage data:", error);
        }
      } else {
        console.log(`üîÑ [STORAGE_EVENT] Ignoring event - key: ${event.key}, hasValue: ${!!event.newValue}`);
      }
    });

    console.log("‚úÖ Cross-tab sync initialized v·ªõi localStorage fallback");

    // üö´ [STORAGE_TEST] DISABLED - WebSocket-only mode
    // setTimeout(() => {
    //   console.log(`üß™ [STORAGE_TEST] Testing localStorage fallback...`);
    //   const testData = {
    //     seatId: 'STORAGE_TEST_SEAT',
    //     userId: localStorage.getItem('userId') || 'unknown',
    //     showtimeId: '121',
    //     action: 'selected',
    //     timestamp: Date.now(),
    //     test: true
    //   };

    //   console.log(`üß™ [STORAGE_TEST] Setting localStorage with data:`, testData);
    //   localStorage.setItem(this.storageKey, JSON.stringify(testData));

    //   // Remove after short delay to trigger storage event
    //   setTimeout(() => {
    //     localStorage.removeItem(this.storageKey);
    //     console.log(`üß™ [STORAGE_TEST] Removed test data from localStorage`);
    //   }, 100);
    // }, 1000);
  }

  /**
   * Broadcast seat update to other tabs
   */
  private broadcastSeatUpdate(
    seatId: string,
    userId: string,
    showtimeId: string,
    action: "selected" | "deselected" | "cancel_booking"
  ): void {
    const data = {
      seatId,
      userId,
      showtimeId,
      action,
      timestamp: Date.now(),
    };

    console.log(`üîß [BROADCAST_DEBUG] Preparing to broadcast:`, data);
    console.log(`üîß [BROADCAST_DEBUG] BroadcastChannel available: ${!!this.broadcastChannel}`);

    // Ensure BroadcastChannel is available
    if (!this.broadcastChannel && typeof BroadcastChannel !== "undefined") {
      console.log(`üîß [BROADCAST_DEBUG] Re-initializing BroadcastChannel...`);
      this.setupCrossTabSync();
    }

    // Use BroadcastChannel if available
    if (this.broadcastChannel) {
      try {
        this.broadcastChannel.postMessage(data);
        console.log(`üì° [BROADCAST_SUCCESS] Sent via BroadcastChannel: ${action} seat ${seatId} to other tabs`);
      } catch (error) {
        console.error(`‚ùå [BROADCAST] Failed to send via BroadcastChannel:`, error);

        // Fallback to localStorage on BroadcastChannel error
        try {
          localStorage.setItem(this.storageKey, JSON.stringify(data));
          setTimeout(() => localStorage.removeItem(this.storageKey), 100);
          console.log(`‚úÖ [BROADCAST_FALLBACK] Successfully sent ${action} seat ${seatId} via localStorage`);
        } catch (fallbackError) {
          console.error(`‚ùå [BROADCAST_FALLBACK] Failed to send via localStorage:`, fallbackError);
        }
      }
    } else {
      console.warn(`‚ö†Ô∏è [BROADCAST] BroadcastChannel not available, using localStorage fallback`);

      // Fallback to localStorage
      try {
        localStorage.setItem(this.storageKey, JSON.stringify(data));
        setTimeout(() => localStorage.removeItem(this.storageKey), 100);
        console.log(`‚úÖ [BROADCAST] Successfully sent ${action} seat ${seatId} via localStorage`);
      } catch (error) {
        console.error(`‚ùå [BROADCAST] Failed to send via localStorage:`, error);
      }
    }
  }

  /**
   * K·∫øt n·ªëi t·ªõi WebSocket server v·ªõi JWT authentication
   */
  async connect(authToken?: string): Promise<boolean> {
    try {
      if (this.socket?.connected) {
        console.log("‚úÖ WebSocket ƒë√£ k·∫øt n·ªëi");
        return true;
      }

      this.setConnectionState("connecting");
      console.log("üîÑ ƒêang k·∫øt n·ªëi WebSocket server...");

      // L·∫•y auth token t·ª´ localStorage n·∫øu kh√¥ng ƒë∆∞·ª£c provide
      const token = authToken || localStorage.getItem("accessToken");

      // üîß Initialize userId t·ª´ localStorage ho·∫∑c decode t·ª´ token
      this.userId = localStorage.getItem("userId");
      if (!this.userId && token) {
        try {
          const payload = JSON.parse(atob(token.split(".")[1]));
          this.userId = payload?.id || payload?.userId || null;
        } catch (e) {
          console.warn("‚ö†Ô∏è Failed to decode userId from token");
        }
      }

      console.log("üîë [DEBUG] Auth token check:", {
        provided: !!authToken,
        fromStorage: !!localStorage.getItem("accessToken"),
        tokenLength: token ? token.length : 0,
        tokenPreview: token ? token.substring(0, 20) + "..." : "null",
      });

      if (!token) {
        console.warn("‚ö†Ô∏è Kh√¥ng c√≥ auth token, s·ª≠ d·ª•ng fallback mode");
        this.enableFallbackMode();
        return false;
      }

      // üîß T·∫°o socket connection v·ªõi authentication v√† CORS fix
      this.socket = io(this.config.url, {
        auth: { token },
        extraHeaders: {
          Authorization: `Bearer ${token}`,
        },
        timeout: this.config.timeout,
        transports: ["websocket", "polling"],
        forceNew: true,
        withCredentials: true,
        autoConnect: true,
      });

      // Setup event listeners
      this.setupSocketEventListeners();

      // ƒê·ª£i connection ho·∫∑c timeout
      return new Promise((resolve) => {
        const connectTimeout = setTimeout(() => {
          console.error("‚ùå WebSocket connection timeout");
          this.enableFallbackMode();
          resolve(false);
        }, this.config.timeout);

        this.socket!.on("connect", () => {
          clearTimeout(connectTimeout);
          this.setConnectionState("connected");
          this.reconnectAttempts = 0;
          console.log("‚úÖ WebSocket connected th√†nh c√¥ng");
          console.log(`üîå Client Socket ID: ${this.socket?.id}`);
          resolve(true);
        });

        this.socket!.on("connect_error", (error) => {
          clearTimeout(connectTimeout);
          console.error("‚ùå WebSocket connection error:", error);
          this.handleConnectionError(error);
          resolve(false);
        });
      });
    } catch (error) {
      console.error("‚ùå L·ªói khi k·∫øt n·ªëi WebSocket:", error);
      this.enableFallbackMode();
      return false;
    }
  }

  /**
   * Setup c√°c event listeners cho socket
   */
  private setupSocketEventListeners(): void {
    if (!this.socket) return;

    // Connection events
    this.socket.on("disconnect", (reason) => {
      console.warn("‚ö†Ô∏è WebSocket disconnected:", reason);
      console.warn("üìä Disconnect details:", {
        reason,
        currentShowtime: this.currentShowtimeId,
        reconnectAttempts: this.reconnectAttempts,
        fallbackMode: this.fallbackMode,
        timestamp: new Date().toISOString(),
      });
      this.setConnectionState("disconnected");
      this.handleDisconnection(reason);
    });

    this.socket.on("reconnect", (attemptNumber) => {
      console.log(`üîÑ WebSocket reconnected sau ${attemptNumber} attempts`);
      this.setConnectionState("connected");
      this.reconnectAttempts = 0;

      // üîß QUAN TR·ªåNG: Setup l·∫°i event listeners sau reconnect
      this.setupSocketEventListeners();

      // Rejoin showtime room n·∫øu c√≥
      if (this.currentShowtimeId) {
        this.joinShowtime(this.currentShowtimeId);
      }
    });

    this.socket.on("reconnect_error", (error) => {
      console.error("‚ùå Reconnection error:", error);
      this.setConnectionState("error");
    });

    // Seat management events
    this.socket.on("seats-state", (data: SeatsStateEvent) => {
      // üîß FIX: Backend g·ª≠i array tr·ª±c ti·∫øp, kh√¥ng ph·∫£i object v·ªõi property seats
      const seatsArray = Array.isArray(data) ? data : data?.seats || [];
      // Only log first time or when seat count changes
      if (!this.lastSeatCount || this.lastSeatCount !== seatsArray.length) {
        console.log(`ü™ë Received ${seatsArray.length} seats from server`);
        this.lastSeatCount = seatsArray.length;
      }

      // ‚úÖ Validate data structure tr∆∞·ªõc khi x·ª≠ l√Ω
      if (!Array.isArray(seatsArray)) {
        console.error("‚ùå Invalid seats data received:", data);
        return;
      }

      // Merge v·ªõi session storage data n·∫øu c√≥ currentShowtimeId
      if (this.currentShowtimeId && this.userId) {
        // üîß FIX: Ch·ªâ l·∫•y gh·∫ø c·ªßa current user ƒë·ªÉ tr√°nh merge gh·∫ø c·ªßa user kh√°c
        const sessionSeats = sessionStorageService.getSelectedSeats(this.currentShowtimeId, this.userId.toString());
        console.log(`üîç [DEBUG] Session seats for user ${this.userId}:`, sessionSeats);

        try {
          const mergedData = {
            seats: seatsArray.map((seat) => {
              // ‚úÖ Validate seat object structure
              if (!seat || typeof seat !== "object") {
                console.warn("‚ö†Ô∏è Invalid seat object:", seat);
                return seat;
              }

              // N·∫øu seat c√≥ trong session storage, mark as selected
              const seatId = seat.id || seat.seatId;
              if (seatId && sessionSeats.includes(seatId)) {
                return { ...seat, status: "selected" as const };
              }
              return seat;
            }),
          };

          console.log(`üíæ Merged ${sessionSeats.length} session seats with server data`);
          this.emit("seats-state", mergedData);
        } catch (error) {
          console.error("‚ùå Error merging seats data:", error);
          // Fallback: emit original data
          this.emit("seats-state", { seats: seatsArray });
        }
      } else {
        this.emit("seats-state", { seats: seatsArray });
      }
    });

    this.socket.on("seat-selected", (data: SeatUpdateEvent) => {
      console.log(`üîß [FRONTEND_DEBUG] Raw data received:`, JSON.stringify(data));
      console.log(`üîß [FRONTEND_DEBUG] data.seatId type: ${typeof data.seatId}, value: ${data.seatId}`);
      console.log(`üîß [FRONTEND_DEBUG] data.userId type: ${typeof data.userId}, value: ${data.userId}`);
      console.log(`üîí Gh·∫ø ${data.seatId} ƒë∆∞·ª£c ch·ªçn b·ªüi user ${data.userId}`);
      console.log(`üîå Socket ID nh·∫≠n event: ${this.socket?.id}`);
      console.log(`üìä Event data:`, data);
      this.emit("seat-selected", data);
    });

    this.socket.on("seat-deselected", (data: SeatUpdateEvent) => {
      console.log(`üîì Gh·∫ø ${data.seatId} ƒë∆∞·ª£c b·ªè ch·ªçn`);
      this.emit("seat-deselected", data);
    });

    this.socket.on("seats-booked", (data: { seatIds: string[] }) => {
      console.log("üé´ Gh·∫ø ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t:", data.seatIds);
      this.emit("seats-booked", data);
    });

    this.socket.on("seat-booked", (data: { seatId: string; bookingId: string }) => {
      console.log(`üî¥ Gh·∫ø ${data.seatId} ƒë√£ ƒë∆∞·ª£c booking #${data.bookingId}`);
      this.emit("seat-booked", data);
    });

    this.socket.on("seat-released", (data: SeatUpdateEvent) => {
      console.log(`üîÑ Gh·∫ø ${data.seatId} ƒë∆∞·ª£c gi·∫£i ph√≥ng`);
      this.emit("seat-released", data);

      // üîß SIMPLE FIX: Auto refresh seats when any seat is released
      console.log("üîÑ [AUTO_REFRESH] Seat released detected - refreshing seats from server...");
      setTimeout(() => {
        if (this.socket?.connected && this.currentShowtimeId) {
          this.requestCurrentSeatsState(this.currentShowtimeId);
          console.log("‚úÖ [AUTO_REFRESH] Requested fresh seats from server");
        }
      }, 500);
    });

    // Timeout management events
    this.socket.on("seat-expiration-warning", (data: SeatExpirationWarning) => {
      console.log(`‚è∞ C·∫£nh b√°o gh·∫ø ${data.seatId} s·∫Øp h·∫øt h·∫°n: ${data.timeRemaining}ms`);
      this.emit("seat-expiration-warning", data);
      this.showExpirationWarning(data);
    });

    this.socket.on("seat-hold-extended", (data: { seatId: string; newExpiresAt: string }) => {
      console.log(`‚è≥ Gh·∫ø ${data.seatId} ƒë∆∞·ª£c gia h·∫°n ƒë·∫øn ${data.newExpiresAt}`);
      this.emit("seat-hold-extended", data);
      toast.success(`ƒê√£ gia h·∫°n gh·∫ø ${data.seatId} th√™m 15 ph√∫t`);
    });

    this.socket.on("seat-hold-extension-failed", (data: { seatId: string; reason: string }) => {
      console.error(`‚ùå Gia h·∫°n gh·∫ø ${data.seatId} th·∫•t b·∫°i: ${data.reason}`);
      this.emit("seat-hold-extension-failed", data);
      toast.error(`Kh√¥ng th·ªÉ gia h·∫°n gh·∫ø ${data.seatId}: ${data.reason}`);
    });

    // Booking confirmation
    this.socket.on("booking-confirmed", (data: BookingConfirmationEvent) => {
      console.log("üéâ Booking confirmed:", data);
      this.emit("booking-confirmed", data);
    });

    // Error handling
    this.socket.on("error", (error: any) => {
      console.error("‚ùå WebSocket error:", error);
      this.emit("error", error);

      // Handle specific backend errors
      if (error.message === "Failed to join showtime") {
        console.log("üîÑ Backend database error - switching to fallback mode");
        this.emit("fallback-mode", { reason: "backend-error", error: error.error });
        toast.error("Chuy·ªÉn sang ch·∫ø ƒë·ªô offline - m·ªôt s·ªë t√≠nh nƒÉng real-time c√≥ th·ªÉ b·ªã h·∫°n ch·∫ø");
        return;
      }

      // Show user-friendly error message
      if (error.message) {
        toast.error(`L·ªói k·∫øt n·ªëi: ${error.message}`);
      } else {
        toast.error("C√≥ l·ªói x·∫£y ra v·ªõi k·∫øt n·ªëi WebSocket");
      }
    });
  }

  /**
   * Tham gia showtime room
   */
  joinShowtime(showtimeId: string): void {
    if (!this.socket) {
      console.warn("‚ö†Ô∏è Socket ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o");
      return;
    }

    // N·∫øu ch∆∞a connected, ƒë·ª£i connected event
    if (!this.socket.connected) {
      console.log(`‚è≥ WebSocket ch∆∞a connected, ƒë·ª£i k·∫øt n·ªëi ƒë·ªÉ join showtime ${showtimeId}`);
      this.currentShowtimeId = showtimeId;

      // ƒê·ª£i connected event ƒë·ªÉ join
      this.socket.once("connect", () => {
        console.log(`üîÑ Connected! B√¢y gi·ªù join showtime ${showtimeId}`);
        this.performJoinShowtime(showtimeId);
      });
      return;
    }

    // N·∫øu ƒë√£ connected, join ngay
    this.performJoinShowtime(showtimeId);
  }

  private performJoinShowtime(showtimeId: string): void {
    console.log(`üé¨ Tham gia showtime room: ${showtimeId}`);
    console.log(`üîå Using Socket ID: ${this.socket?.id}`);
    this.currentShowtimeId = showtimeId;

    // üö´ DISABLED: Clear session storage ƒë·ªÉ preserve seats across tabs
    // sessionStorageService.clearSelectedSeats(showtimeId);

    this.socket!.emit("join-showtime", { showtimeId });

    // üîÑ Request current state c·ªßa t·∫•t c·∫£ gh·∫ø khi join
    this.requestCurrentSeatsState(showtimeId);
  }

  /**
   * Request current state c·ªßa t·∫•t c·∫£ gh·∫ø trong showtime
   */
  requestCurrentSeatsState(showtimeId: string): void {
    if (!this.socket?.connected) {
      console.warn("‚ö†Ô∏è WebSocket ch∆∞a k·∫øt n·ªëi, kh√¥ng th·ªÉ request seats state");
      return;
    }

    // Request current seats state (reduced logging)
    this.socket.emit("get-seats-state", { showtimeId });

    // üé≠ Simulate server response v·ªõi current state t·ª´ localStorage
    this.simulateCurrentSeatsStateResponse(showtimeId);
  }

  /**
   * Simulate server response cho get-seats-state request
   */
  private simulateCurrentSeatsStateResponse(showtimeId: string): void {
    setTimeout(() => {
      // L·∫•y current state t·ª´ localStorage c·ªßa t·∫•t c·∫£ users
      const allSelectedSeats = this.getAllSelectedSeatsFromStorage(showtimeId);

      if (allSelectedSeats.length > 0) {
        console.log(`üîÑ Simulating seats-state response v·ªõi ${allSelectedSeats.length} gh·∫ø ƒë√£ ƒë∆∞·ª£c ch·ªçn`);

        // Emit seats-state event v·ªõi current state
        this.emit("seats-state", {
          showtimeId,
          seats: allSelectedSeats.map((seatId) => ({
            seatId,
            status: "selected",
            userId: this.getOwnerOfSeat(seatId, showtimeId),
            expiresAt: new Date(Date.now() + 15 * 60 * 1000).toISOString(), // 15 ph√∫t
          })),
        });
      }
    }, 100); // Delay nh·ªè ƒë·ªÉ simulate network
  }

  /**
   * L·∫•y t·∫•t c·∫£ gh·∫ø ƒë√£ ƒë∆∞·ª£c ch·ªçn t·ª´ localStorage c·ªßa t·∫•t c·∫£ users
   */
  private getAllSelectedSeatsFromStorage(showtimeId: string): string[] {
    const allSeats: string[] = [];

    // Scan t·∫•t c·∫£ localStorage keys ƒë·ªÉ t√¨m selected seats
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (key?.startsWith(`selectedSeats_${showtimeId}_`)) {
        try {
          const seats = JSON.parse(localStorage.getItem(key) || "[]");
          allSeats.push(...seats);
        } catch (error) {
          console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ parse localStorage key: ${key}`);
        }
      }
    }

    // Remove duplicates
    return [...new Set(allSeats)];
  }

  /**
   * T√¨m owner c·ªßa gh·∫ø t·ª´ localStorage
   */
  private getOwnerOfSeat(seatId: string, showtimeId: string): string {
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (key?.startsWith(`selectedSeats_${showtimeId}_`)) {
        try {
          const seats = JSON.parse(localStorage.getItem(key) || "[]");
          if (seats.includes(seatId)) {
            // Extract userId t·ª´ key: selectedSeats_showtimeId_userId
            return key.split("_")[2] || "unknown";
          }
        } catch (error) {
          console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ parse localStorage key: ${key}`);
        }
      }
    }
    return "unknown";
  }

  /**
   * R·ªùi kh·ªèi showtime room
   */
  leaveShowtime(): void {
    if (!this.socket?.connected || !this.currentShowtimeId) return;

    console.log(`üö™ R·ªùi kh·ªèi showtime room: ${this.currentShowtimeId}`);
    this.socket.emit("leave-showtime", { showtimeId: this.currentShowtimeId });
    this.currentShowtimeId = null;
  }

  /**
   * Ch·ªçn gh·∫ø
   */
  selectSeat(showtimeId: string, seatId: string, userId?: string): void {
    // Validation ƒë·∫ßu v√†o
    if (!seatId || seatId === "undefined" || seatId === showtimeId) {
      console.warn(`‚ö†Ô∏è Invalid seatId: ${seatId}, skipping selectSeat`);
      return;
    }

    if (!showtimeId || showtimeId === "undefined") {
      console.warn(`‚ö†Ô∏è Invalid showtimeId: ${showtimeId}, skipping selectSeat`);
      return;
    }

    if (!this.socket?.connected || !this.currentShowtimeId) {
      console.warn("‚ö†Ô∏è WebSocket ch∆∞a k·∫øt n·ªëi ho·∫∑c ch∆∞a join showtime");
      return;
    }

    // Try multiple sources for userId
    let finalUserId = userId;

    if (!finalUserId) {
      // Try localStorage
      finalUserId = localStorage.getItem("userId") || undefined;
    }

    if (!finalUserId) {
      // Try to get from user object in localStorage
      const userStr = localStorage.getItem("user");
      if (userStr) {
        try {
          const user = JSON.parse(userStr);
          finalUserId = user?.id || user?.User_ID;
        } catch (e) {
          console.warn("‚ö†Ô∏è Failed to parse user from localStorage");
        }
      }
    }

    if (!finalUserId) {
      // Try to decode from token (both 'token' and 'accessToken' keys)
      const token = localStorage.getItem("token") || localStorage.getItem("accessToken");
      if (token) {
        try {
          const payload = JSON.parse(atob(token.split(".")[1]));
          finalUserId = payload?.id || payload?.userId;
        } catch (e) {
          console.warn("‚ö†Ô∏è Failed to decode userId from token");
        }
      }
    }

    // üîß FIX: Try to get from current user context if still null
    if (!finalUserId) {
      try {
        // Try to get from window context or global state
        const authContext = (window as any).__AUTH_CONTEXT__;
        if (authContext?.user?.User_ID) {
          finalUserId = authContext.user.User_ID.toString();
        }
      } catch (e) {
        console.warn("‚ö†Ô∏è Failed to get userId from auth context");
      }
    }

    if (!finalUserId || finalUserId === "undefined" || finalUserId === "null") {
      console.warn(`‚ö†Ô∏è Invalid userId: ${finalUserId}, skipping selectSeat`);
      console.warn(
        `üîç Debug - userId sources: {provided: ${userId}, localStorage: ${localStorage.getItem(
          "userId"
        )}, user: ${localStorage.getItem("user")}, token: ${!!localStorage.getItem("token")}}`
      );
      return;
    }

    console.log(`üîí Ch·ªçn gh·∫ø ${seatId} cho user ${finalUserId} trong showtime ${showtimeId}`);

    // üíæ Save to session storage for persistence
    sessionStorageService.saveSelectedSeat(seatId, finalUserId, showtimeId);

    // Emit to WebSocket server
    this.socket.emit("select-seat", {
      showtimeId: showtimeId,
      seatId,
      userId: finalUserId,
    });

    // üîÑ ENABLED: Cross-tab broadcast for seat selection to ensure sync
    console.log(`üì° [SELECT_SEAT] Broadcasting seat selection: ${seatId} by user ${finalUserId}`);
    console.log(`üîß [SELECT_SEAT] BroadcastChannel status: ${!!this.broadcastChannel}`);
    console.log(`üîß [SELECT_SEAT] Current showtime: ${this.currentShowtimeId}`);

    this.broadcastSeatUpdate(seatId, finalUserId, this.currentShowtimeId, "selected");

    console.log(`‚úÖ [SELECT_SEAT] Cross-tab broadcast completed for seat selection`);
    console.log(`üîß [SELECT_SEAT] Final userId used: ${finalUserId}`);
  }

  /**
   * B·ªè ch·ªçn gh·∫ø
   */
  deselectSeat(seatId: string, userId?: string): void {
    if (!this.socket?.connected || !this.currentShowtimeId) {
      console.warn("‚ö†Ô∏è WebSocket ch∆∞a k·∫øt n·ªëi ho·∫∑c ch∆∞a join showtime");
      return;
    }

    const finalUserId = userId || localStorage.getItem("userId") || "anonymous";

    // üóëÔ∏è Remove from session storage
    sessionStorageService.removeSelectedSeat(seatId, this.currentShowtimeId);

    // Emit to WebSocket server
    this.socket.emit("deselect-seat", {
      showtimeId: this.currentShowtimeId,
      seatId,
      userId: finalUserId,
    });

    // üîÑ ENABLED: Cross-tab broadcast for seat deselection to ensure sync
    console.log(`üì° [DESELECT_SEAT] Broadcasting seat deselection: ${seatId} by user ${finalUserId}`);
    this.broadcastSeatUpdate(seatId, finalUserId, this.currentShowtimeId, "deselected");
    console.log(`‚úÖ [DESELECT_SEAT] Cross-tab broadcast completed for seat deselection`);
  }

  /**
   * Gia h·∫°n th·ªùi gian gi·ªØ gh·∫ø
   */
  extendSeatHold(seatId: string): void {
    if (!this.socket?.connected || !this.currentShowtimeId) {
      console.warn("‚ö†Ô∏è WebSocket ch∆∞a k·∫øt n·ªëi ho·∫∑c ch∆∞a join showtime");
      return;
    }

    console.log(`‚è≥ Gia h·∫°n gh·∫ø: ${seatId}`);
    this.socket.emit("extend-seat-hold", {
      showtimeId: this.currentShowtimeId,
      seatId,
    });
  }

  /**
   * X√°c nh·∫≠n booking
   */
  confirmBooking(seatIds: string[], bookingData: any): void {
    if (!this.socket?.connected || !this.currentShowtimeId) {
      console.warn("‚ö†Ô∏è WebSocket ch∆∞a k·∫øt n·ªëi ho·∫∑c ch∆∞a join showtime");
      return;
    }

    console.log("üé´ X√°c nh·∫≠n booking:", { seatIds, bookingData });
    this.socket.emit("confirm-booking", {
      showtimeId: this.currentShowtimeId,
      seatIds,
      bookingData,
    });
  }

  /**
   * ƒêƒÉng k√Ω event listener
   */
  on(event: string, callback: Function): void {
    if (!this.eventListeners.has(event)) {
      this.eventListeners.set(event, new Set());
    }
    this.eventListeners.get(event)!.add(callback);
  }

  /**
   * H·ªßy ƒëƒÉng k√Ω event listener
   */
  off(event: string, callback: Function): void {
    const listeners = this.eventListeners.get(event);
    if (listeners) {
      listeners.delete(callback);
    }
  }

  /**
   * Emit event t·ªõi c√°c listeners
   */
  private emit(event: string, data: any): void {
    const listeners = this.eventListeners.get(event);
    if (listeners) {
      listeners.forEach((callback) => {
        try {
          callback(data);
        } catch (error) {
          console.error(`‚ùå L·ªói khi x·ª≠ l√Ω event ${event}:`, error);
        }
      });
    }
  }

  /**
   * Set connection state v√† emit event
   */
  private setConnectionState(state: ConnectionState): void {
    if (this.connectionState !== state) {
      this.connectionState = state;
      this.emit("connection-state-changed", state);
      console.log(`üîå Connection state changed: ${state}`);
    }
  }

  /**
   * X·ª≠ l√Ω connection error
   */
  private handleConnectionError(error: any): void {
    this.setConnectionState("error");

    if (error.message === "Authentication failed") {
      console.error("‚ùå Authentication failed, chuy·ªÉn sang fallback mode");

      // Safe toast call
      try {
        if (typeof toast?.error === "function") {
          toast.error("X√°c th·ª±c th·∫•t b·∫°i. S·ª≠ d·ª•ng ch·∫ø ƒë·ªô offline.");
        }
      } catch (toastError) {
        console.warn("‚ö†Ô∏è Toast error:", toastError);
      }

      this.enableFallbackMode();
    } else {
      console.error("‚ùå Connection error:", error);
      this.scheduleReconnect();
    }
  }

  /**
   * X·ª≠ l√Ω disconnection
   */
  private handleDisconnection(reason: string): void {
    console.warn(`‚ö†Ô∏è WebSocket disconnected: ${reason}`);

    // üî• FORCE RECONNECT - Lu√¥n th·ª≠ reconnect trong m·ªçi tr∆∞·ªùng h·ª£p
    if (this.currentShowtimeId) {
      console.log(`üîÑ Auto-reconnecting for showtime ${this.currentShowtimeId}...`);
      this.scheduleReconnect();

      // Backup: Start continuous auto-reconnect
      this.startAutoReconnect(this.currentShowtimeId);
    }
  }

  /**
   * üî• AGGRESSIVE RECONNECT - Kh√¥ng bao gi·ªù t·ª´ b·ªè k·∫øt n·ªëi
   */
  private scheduleReconnect(): void {
    // üî• NEVER GIVE UP - Reset attempts n·∫øu qu√° nhi·ªÅu ƒë·ªÉ ti·∫øp t·ª•c th·ª≠
    if (this.reconnectAttempts >= this.config.reconnectAttempts) {
      console.warn(`‚ö†Ô∏è Reached max attempts (${this.config.reconnectAttempts}), resetting counter...`);
      this.reconnectAttempts = 0; // Reset ƒë·ªÉ ti·∫øp t·ª•c th·ª≠
    }

    this.setConnectionState("reconnecting");
    this.reconnectAttempts++;

    const delay = Math.min(
      this.config.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1),
      this.config.maxReconnectDelay
    );

    console.log(`üîÑ Reconnect attempt ${this.reconnectAttempts}/${this.config.reconnectAttempts} sau ${delay}ms`);

    this.reconnectTimer = setTimeout(() => {
      this.connect();
    }, delay);
  }

  /**
   * B·∫≠t fallback mode
   */
  private enableFallbackMode(): void {
    this.fallbackMode = true;
    this.setConnectionState("error");
    console.warn("‚ö†Ô∏è Fallback mode enabled - s·ª≠ d·ª•ng localStorage v√† API calls");      // Safe toast call
      try {
        if (typeof toast?.error === "function") {
          toast.error("Ch·∫ø ƒë·ªô offline: M·ªôt s·ªë t√≠nh nƒÉng real-time c√≥ th·ªÉ kh√¥ng kh·∫£ d·ª•ng");
        } else {
          console.warn("‚ö†Ô∏è Toast not available, fallback mode enabled silently");
        }
      } catch (error) {
        console.warn("‚ö†Ô∏è Toast error:", error);
      }
  }

  /**
   * Hi·ªÉn th·ªã c·∫£nh b√°o gh·∫ø s·∫Øp h·∫øt h·∫°n
   */
  private showExpirationWarning(data: SeatExpirationWarning): void {
    const minutes = Math.ceil(data.timeRemaining / 60000);
    toast.error(`Gh·∫ø ${data.seatId} s·∫Ω h·∫øt h·∫°n sau ${minutes} ph√∫t. Nh·∫•n ƒë·ªÉ gia h·∫°n.`, {
      duration: 10000,
    });
  }

  /**
   * Ng·∫Øt k·∫øt n·ªëi WebSocket
   */
  disconnect(): void {
    console.log("üîå Ng·∫Øt k·∫øt n·ªëi WebSocket...");

    if (this.reconnectTimer) {
      clearTimeout(this.reconnectTimer);
      this.reconnectTimer = null;
    }

    if (this.socket) {
      this.socket.disconnect();
      this.socket = null;
    }

    this.setConnectionState("disconnected");
    this.currentShowtimeId = null;
    this.reconnectAttempts = 0;
    this.fallbackMode = false;
  }

  /**
   * Silent clear - kh√¥ng broadcast ƒë·∫øn tabs kh√°c (cho payment)
   */
  silentClearAllSelectedSeats(userId?: string, showtimeId?: string): void {
    const targetShowtimeId = showtimeId || this.currentShowtimeId;

    if (!targetShowtimeId) {
      console.warn("‚ö†Ô∏è Kh√¥ng c√≥ showtime ID ƒë·ªÉ silent clear seats");
      return;
    }

    console.log(`ü§´ Silent clear all seats for showtime: ${targetShowtimeId} (no broadcast)`);

    // üîß FIX: L·∫•y userId ch√≠nh x√°c t·ª´ nhi·ªÅu ngu·ªìn
    const finalUserId =
      userId ||
      localStorage.getItem("userId") ||
      localStorage.getItem("user")?.replace(/['"]/g, "") ||
      sessionStorage.getItem("userId") ||
      "anonymous";

    console.log(`üë§ [SILENT_CLEAR] Using userId: ${finalUserId} (from ${userId ? "param" : "storage"})`);

    // Clear all possible storage keys
    const allStorageKeys = [
      `booking_session_${targetShowtimeId}`,
      `galaxy_cinema_session_${targetShowtimeId}`,
      `selectedSeats_${targetShowtimeId}`,
      `selectedSeats_${targetShowtimeId}_${finalUserId}`,
      `seat_${targetShowtimeId}`,
      `payment_timer_${targetShowtimeId}`,
    ];

    // Clear sessionStorage
    allStorageKeys.forEach((key) => {
      if (sessionStorage.getItem(key)) {
        sessionStorage.removeItem(key);
      }
    });

    // Clear localStorage
    allStorageKeys.forEach((key) => {
      if (localStorage.getItem(key)) {
        localStorage.removeItem(key);
      }
    });

    // üßπ ENABLE: Clear sessionStorageService khi cancel booking ƒë·ªÉ tr√°nh restore
    sessionStorageService.clearSelectedSeats(targetShowtimeId);

    // Clear server state
    if (this.socket?.connected) {
      this.socket.emit("clear-all-seats", {
        showtimeId: targetShowtimeId,
        userId: finalUserId,
      });
    }

    // ü§´ NO BROADCAST - Silent cleanup for payment
    console.log(`ü§´ Silent cleanup completed - no cross-tab broadcast sent`);
  }

  /**
   * Clear t·∫•t c·∫£ gh·∫ø ƒë√£ ch·ªçn c·ªßa user hi·ªán t·∫°i
   */
  clearAllSelectedSeats(userId?: string, showtimeId?: string): void {
    const targetShowtimeId = showtimeId || this.currentShowtimeId;

    if (!targetShowtimeId) {
      console.warn("‚ö†Ô∏è Kh√¥ng c√≥ showtime ID ƒë·ªÉ clear seats");
      return;
    }

    console.log(`üßπ Clearing all seats for showtime: ${targetShowtimeId}`);

    // üîß FIX: L·∫•y userId ch√≠nh x√°c t·ª´ nhi·ªÅu ngu·ªìn
    const finalUserId =
      userId ||
      localStorage.getItem("userId") ||
      localStorage.getItem("user")?.replace(/['"]/g, "") ||
      sessionStorage.getItem("userId") ||
      "anonymous";

    // Clear all possible storage keys
    const allStorageKeys = [
      `booking_session_${targetShowtimeId}`,
      `galaxy_cinema_session_${targetShowtimeId}`,
      `selectedSeats_${targetShowtimeId}`,
      `selectedSeats_${targetShowtimeId}_${finalUserId}`,
      `seat_${targetShowtimeId}`,
      `payment_timer_${targetShowtimeId}`,
    ];

    // Clear sessionStorage
    allStorageKeys.forEach((key) => {
      if (sessionStorage.getItem(key)) {
        sessionStorage.removeItem(key);
      }
    });

    // Clear localStorage
    allStorageKeys.forEach((key) => {
      if (localStorage.getItem(key)) {
        localStorage.removeItem(key);
      }
    });

    // üßπ ENABLE: Clear sessionStorageService khi cancel booking ƒë·ªÉ tr√°nh restore
    sessionStorageService.clearSelectedSeats(targetShowtimeId);

    // Clear server state
    if (this.socket?.connected) {
      this.socket.emit("clear-all-seats", {
        showtimeId: targetShowtimeId,
        userId: finalUserId,
      });
    }

    // üîÑ ENABLED: Cross-tab broadcast for cancel booking to sync all tabs
    this.broadcastSeatUpdate("CANCEL_BOOKING", finalUserId, targetShowtimeId, "cancel_booking");
    console.log(`‚úÖ Cleared all seats for showtime: ${targetShowtimeId} (WITH cross-tab broadcast for cancel)`);
  }

  /**
   * Silent cleanup cho payment - kh√¥ng broadcast ƒë·∫øn tabs kh√°c
   */
  silentCleanupUserSeats(showtimeId?: string): Promise<boolean> {
    return new Promise((resolve) => {
      const targetShowtimeId = showtimeId || this.currentShowtimeId;

      if (!targetShowtimeId) {
        console.warn("‚ö†Ô∏è Kh√¥ng c√≥ showtime ID ƒë·ªÉ silent cleanup");
        resolve(false);
        return;
      }

      console.log(`ü§´ Silent cleanup for showtime: ${targetShowtimeId} (no cross-tab broadcast)`);

      // 1. Clear frontend storage ONLY (no broadcast)
      this.silentClearAllSelectedSeats(undefined, targetShowtimeId);

      // 2. Force cleanup backend if connected
      if (!this.socket?.connected) {
        console.warn("‚ö†Ô∏è WebSocket not connected, only frontend cleanup performed");
        resolve(true);
        return;
      }

      // Listen for completion
      const timeoutId = setTimeout(() => {
        console.warn("‚ö†Ô∏è Silent cleanup timeout");
        resolve(true);
      }, 5000);

      const handleCompletion = () => {
        clearTimeout(timeoutId);
        this.socket?.off("force-cleanup-completed", handleCompletion);

        console.log(`‚úÖ Silent cleanup completed`);
        resolve(true);
      };

      this.socket.on("force-cleanup-completed", handleCompletion);

      // Request backend cleanup
      this.socket.emit("force-cleanup-user-seats", {
        showtimeId: targetShowtimeId,
      });
    });
  }

  /**
   * Force cleanup t·∫•t c·∫£ gh·∫ø c·ªßa user (cho navigation back)
   */
  forceCleanupUserSeats(showtimeId?: string): Promise<boolean> {
    return new Promise((resolve) => {
      const targetShowtimeId = showtimeId || this.currentShowtimeId;

      if (!targetShowtimeId) {
        console.warn("‚ö†Ô∏è Kh√¥ng c√≥ showtime ID ƒë·ªÉ force cleanup");
        resolve(false);
        return;
      }

      console.log(`üßπ Force cleanup for showtime: ${targetShowtimeId}`);

      // 1. Clear frontend storage first
      this.clearAllSelectedSeats(undefined, targetShowtimeId);

      // 2. Force cleanup backend if connected
      if (!this.socket?.connected) {
        console.warn("‚ö†Ô∏è WebSocket not connected, only frontend cleanup performed");
        resolve(true);
        return;
      }

      // Listen for completion
      const timeoutId = setTimeout(() => {
        console.warn("‚ö†Ô∏è Force cleanup timeout");
        resolve(true);
      }, 5000);

      const handleCompletion = () => {
        clearTimeout(timeoutId);
        this.socket?.off("force-cleanup-completed", handleCompletion);

        console.log(`‚úÖ Force cleanup completed`);
        resolve(true);
      };

      this.socket.on("force-cleanup-completed", handleCompletion);

      // Request backend cleanup
      this.socket.emit("force-cleanup-user-seats", {
        showtimeId: targetShowtimeId,
      });
    });
  }

  /**
   * Cleanup khi component unmount
   */
  cleanup(): void {
    console.log("üßπ Cleanup WebSocketService...");

    // üö® KH√îNG clear selected seats ƒë·ªÉ preserve session khi navigate
    // this.clearAllSelectedSeats();

    this.leaveShowtime();
    this.disconnect();
    this.eventListeners.clear();

    // üîÑ Close BroadcastChannel - but keep it available for cross-tab sync
    if (this.broadcastChannel) {
      console.log("üîÑ BroadcastChannel kept alive for cross-tab sync");
      // Don't close BroadcastChannel to maintain cross-tab communication
      // this.broadcastChannel.close();
      // this.broadcastChannel = null;
    }
  }

  // Getters
  get isConnected(): boolean {
    return this.socket?.connected || false;
  }

  get isFallbackMode(): boolean {
    return this.fallbackMode;
  }

  get getConnectionState(): ConnectionState {
    return this.connectionState;
  }

  get getCurrentShowtimeId(): string | null {
    return this.currentShowtimeId;
  }

  /**
   * Force refresh seats state t·ª´ server
   */
  refreshSeatsState(): void {
    if (!this.socket?.connected || !this.currentShowtimeId) {
      console.warn("‚ö†Ô∏è Kh√¥ng th·ªÉ refresh seats state");
      return;
    }

    console.log("üîÑ Refresh seats state t·ª´ server...");
    this.socket.emit("get-seats-state", {
      showtimeId: this.currentShowtimeId,
    });
  }

  /**
   * Request seats state for specific showtime
   */
  requestSeatsState(showtimeId: string): void {
    if (!this.socket?.connected) {
      console.warn("‚ö†Ô∏è Kh√¥ng th·ªÉ request seats state - WebSocket not connected");
      return;
    }

    console.log(`üîÑ Requesting seats state for showtime: ${showtimeId}`);
    this.socket.emit("get-seats-state", {
      showtimeId: showtimeId,
    });
  }

  /**
   * Test BroadcastChannel functionality
   */
  testBroadcastChannel(): void {
    if (!this.broadcastChannel) {
      console.warn("‚ö†Ô∏è [TEST] BroadcastChannel not available for testing");
      return;
    }

    const testData = {
      seatId: "TEST",
      userId: "TEST_USER",
      showtimeId: "TEST_SHOWTIME",
      action: "test",
      timestamp: Date.now(),
      test: true,
    };

    console.log(`üß™ [TEST] Sending test message via BroadcastChannel:`, testData);
    try {
      this.broadcastChannel.postMessage(testData);
      console.log(`‚úÖ [TEST] Test message sent successfully`);
    } catch (error) {
      console.error(`‚ùå [TEST] Failed to send test message:`, error);
    }
  }

  /**
   * üî• FORCE RECONNECT - Bu·ªôc k·∫øt n·ªëi l·∫°i ngay l·∫≠p t·ª©c
   */
  forceReconnect(showtimeId?: string): Promise<boolean> {
    return new Promise((resolve) => {
      const targetShowtimeId = showtimeId || this.currentShowtimeId;

      console.log(`üî• Force reconnecting WebSocket${targetShowtimeId ? ` for showtime ${targetShowtimeId}` : ""}...`);

      // Disconnect tr∆∞·ªõc
      if (this.socket?.connected) {
        this.socket.disconnect();
      }

      // Reset state
      this.setConnectionState("disconnected");
      this.reconnectAttempts = 0;

      // Connect l·∫°i
      setTimeout(() => {
        this.connect()
          .then(resolve)
          .catch(() => resolve(false));
      }, 100);
    });
  }

  /**
   * üîÑ AUTO RECONNECT - T·ª± ƒë·ªông k·∫øt n·ªëi l·∫°i v·ªõi retry logic
   */
  startAutoReconnect(showtimeId?: string): void {
    if (this.reconnectTimer) {
      clearInterval(this.reconnectTimer);
    }

    const targetShowtimeId = showtimeId || this.currentShowtimeId;
    if (!targetShowtimeId) return;

    console.log(`üîÑ Starting auto-reconnect for showtime ${targetShowtimeId}`);

    this.reconnectTimer = setInterval(() => {
      if (!this.socket?.connected && this.connectionState !== "connecting") {
        console.log(`üîÑ Auto-reconnect attempt ${this.reconnectAttempts + 1}...`);
        this.connect();
      }
    }, 3000); // Check every 3 seconds
  }

  /**
   * Ki·ªÉm tra health c·ªßa WebSocket connection
   */
  async healthCheck(): Promise<boolean> {
    if (!this.socket?.connected) {
      return false;
    }

    return new Promise((resolve) => {
      const timeout = setTimeout(() => resolve(false), 5000);

      this.socket!.emit("ping", { timestamp: Date.now() });
      this.socket!.once("pong", () => {
        clearTimeout(timeout);
        resolve(true);
      });
    });
  }
}

// Export singleton instance
export const webSocketService = new WebSocketService();
export default webSocketService;