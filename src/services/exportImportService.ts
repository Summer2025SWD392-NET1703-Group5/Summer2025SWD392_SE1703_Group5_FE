

import apiClient from './apiClient';

interface ExportResponse {
    success: boolean;
    message: string;
    filename?: string;
}

interface ImportResponse {
    success: boolean;
    message: string;
    results?: {
        imported: number;
        failed: number;
        errors?: string[];
    };
}

class ExportImportService {

    // =============================================================================
    // MOVIE EXPORT/IMPORT APIs
    // =============================================================================

    /**
     * Xu·∫•t t·∫•t c·∫£ phim ra file Excel (OPTIMIZED)
     * GET /export-import/movies/export
     */
    async exportMovies(): Promise<Blob> {
        console.log('üåê [exportImportService] G·ªçi API export movies...');
        console.log('üîó [exportImportService] URL:', '/export-import/movies/export');

        try {
            const response = await apiClient.get('/export-import/movies/export', {
                responseType: 'blob',
                headers: {
                    'Accept': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                }
            });

            console.log('‚úÖ [exportImportService] API response th√†nh c√¥ng:', {
                status: response.status,
                contentType: response.headers['content-type'],
                dataSize: response.data?.size || 'unknown'
            });

            return response.data;
        } catch (error: any) {
            console.error('‚ùå [exportImportService] API call failed:', {
                url: '/export-import/movies/export',
                status: error.response?.status,
                message: error.message,
                data: error.response?.data
            });
            throw error;
        }
    }

    /**
     * Nh·∫≠p phim t·ª´ file Excel (OPTIMIZED)
     * POST /export-import/movies/import
     */
    async importMovies(file: File): Promise<ImportResponse> {
        console.log('üåê [exportImportService] G·ªçi API import movies...');
        console.log('üîó [exportImportService] URL:', '/export-import/movies/import');

        try {
            const formData = new FormData();
            formData.append('file', file);

            const response = await apiClient.post('/export-import/movies/import', formData, {
                headers: {
                    'Content-Type': 'multipart/form-data'
                }
            });

            console.log('‚úÖ [exportImportService] API response th√†nh c√¥ng:', {
                status: response.status,
                data: response.data
            });

            return response.data;
        } catch (error: any) {
            console.error('‚ùå [exportImportService] API call failed:', {
                url: '/export-import/movies/import',
                status: error.response?.status,
                message: error.message,
                data: error.response?.data
            });
            throw error;
        }
    }

    /**
     * T·∫£i template Excel cho import phim (S·ª≠ d·ª•ng API backend)
     * GET /export-import/movies/template
     */
    async downloadMovieTemplate(): Promise<Blob> {
        console.log('üåê [exportImportService] G·ªçi API t·∫£i template phim...');
        console.log('üîó [exportImportService] URL:', '/export-import/movies/template');

        try {
            const response = await apiClient.get('/export-import/movies/template', {
                responseType: 'blob',
                headers: {
                    'Accept': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                }
            });

            console.log('‚úÖ [exportImportService] API template response th√†nh c√¥ng:', {
                status: response.status,
                contentType: response.headers['content-type'],
                dataSize: response.data?.size || 'unknown'
            });

            return response.data;
        } catch (error: any) {
            console.error('‚ùå [exportImportService] API template call failed:', {
                url: '/export-import/movies/template',
                status: error.response?.status,
                message: error.message
            });
            throw error;
        }
    }

    // =============================================================================
    // CINEMA EXPORT/IMPORT APIs
    // =============================================================================

    /**
     * Xu·∫•t ph√≤ng chi·∫øu v√† s∆° ƒë·ªì gh·∫ø cho m·ªôt r·∫°p phim
     * GET /export-import/cinemas/:cinemaId/export
     */
    async exportCinemaRooms(cinemaId: number): Promise<Blob> {
        console.log('üåê [exportImportService] G·ªçi API export cinema rooms cho cinemaId:', cinemaId);
        console.log('üîó [exportImportService] URL:', `/export-import/cinemas/${cinemaId}/export`);

        try {
            const response = await apiClient.get(`/export-import/cinemas/${cinemaId}/export`, {
                responseType: 'blob'
            });

            console.log('‚úÖ [exportImportService] API export cinema rooms response th√†nh c√¥ng:', response.status);
            return response.data;
        } catch (error: any) {
            console.error('‚ùå [exportImportService] L·ªói khi export cinema rooms:', error);
            const errorMessage = error.response?.data?.message || 'Kh√¥ng th·ªÉ xu·∫•t d·ªØ li·ªáu ph√≤ng chi·∫øu.';

            if (error.response?.status === 404) {
                console.warn(`‚ö†Ô∏è [exportImportService] R·∫°p v·ªõi ID ${cinemaId} kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng c√≥ ph√≤ng n√†o`);
                throw new Error(`R·∫°p ID ${cinemaId} kh√¥ng c√≥ ph√≤ng chi·∫øu ho·∫∑c kh√¥ng t·ªìn t·∫°i`);
            }

            throw new Error(errorMessage);
        }
    }

    /**
     * Xu·∫•t danh s√°ch t·∫•t c·∫£ r·∫°p chi·∫øu (S·ª≠ d·ª•ng API cinemas v√† xu·∫•t b·∫±ng excelUtils)
     */
    async exportAllCinemas(): Promise<Blob> {
        console.log('üåê [exportImportService] G·ªçi API export all cinemas...');
        console.log('üîó [exportImportService] URL:', '/cinemas');

        try {
            // L·∫•y data t·ª´ API cinemas hi·ªán c√≥
            const response = await apiClient.get('/cinemas');
            console.log('‚úÖ [exportImportService] API cinemas response:', {
                status: response.status,
                dataLength: response.data?.length || 0
            });

            const cinemas = response.data;

            // Chuy·ªÉn ƒë·ªïi data cho Excel
            const exportData = cinemas.map((cinema: any) => ({
                'Cinema_ID': cinema.Cinema_ID,
                'T√™n r·∫°p': cinema.Cinema_Name,
                'ƒê·ªãa ch·ªâ': cinema.Address,
                'Th√†nh ph·ªë': cinema.City,
                'Tr·∫°ng th√°i': cinema.Status,
                'M√¥ t·∫£': cinema.Description || '',
                'Ng√†y t·∫°o': cinema.Created_At ? new Date(cinema.Created_At).toLocaleDateString('vi-VN') : '',
            }));

            console.log('üìä [exportImportService] Export data prepared:', {
                recordCount: exportData.length,
                firstRecord: exportData[0]
            });

            // S·ª≠ d·ª•ng excelUtilsBlob ƒë·ªÉ t·∫°o file Excel
            const { exportToExcelBlob } = await import('../utils/excelUtilsBlob');
            const blob = await exportToExcelBlob(exportData, 'Danh s√°ch r·∫°p chi·∫øu');

            console.log('üìÅ [exportImportService] Excel blob created:', {
                size: blob.size,
                type: blob.type
            });

            return blob;
        } catch (error: any) {
            console.error('‚ùå [exportImportService] Export all cinemas error:', {
                url: '/cinemas',
                status: error.response?.status,
                message: error.message,
                data: error.response?.data
            });
            throw error;
        }
    }

    /**
     * Import ph√≤ng chi·∫øu v√† s∆° ƒë·ªì gh·∫ø cho m·ªôt r·∫°p phim
     * POST /export-import/cinemas/:cinemaId/import
     */
    async importCinemaRooms(cinemaId: number, file: File): Promise<any> {
        try {
            const formData = new FormData();
            formData.append('file', file);

            const response = await apiClient.post(`/export-import/cinemas/${cinemaId}/import`, formData, {
                headers: {
                    'Content-Type': 'multipart/form-data'
                }
            });

            // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p khi response.data kh√¥ng c√≥ tr∆∞·ªùng results
            if (response.data && response.data.success) {
                if (!response.data.results) {
                    // T·∫°o m·ªôt k·∫øt qu·∫£ chu·∫©n d·ª±a tr√™n data t·ª´ backend
                    const roomsCreated = response.data.data?.rooms?.created || 0;
                    const roomsUpdated = response.data.data?.rooms?.updated || 0;
                    const layoutsCreated = response.data.data?.layouts?.created || 0;
                    const layoutsUpdated = response.data.data?.layouts?.updated || 0;

                    // T·ª± ƒë·ªông refresh trang sau khi import th√†nh c√¥ng
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500); // ƒê·ª£i 1.5 gi√¢y ƒë·ªÉ ng∆∞·ªùi d√πng th·∫•y th√¥ng b√°o th√†nh c√¥ng

                    return {
                        success: true,
                        results: {
                            imported: roomsCreated + roomsUpdated + layoutsCreated + layoutsUpdated,
                            failed: response.data.data?.rooms?.errors?.length + response.data.data?.layouts?.errors?.length || 0,
                            errors: [
                                ...(response.data.data?.rooms?.errors || []),
                                ...(response.data.data?.layouts?.errors || [])
                            ]
                        }
                    };
                }

                // T·ª± ƒë·ªông refresh trang sau khi import th√†nh c√¥ng
                setTimeout(() => {
                    window.location.reload();
                }, 1500); // ƒê·ª£i 1.5 gi√¢y ƒë·ªÉ ng∆∞·ªùi d√πng th·∫•y th√¥ng b√°o th√†nh c√¥ng
            }

            return response.data;
        } catch (error: any) {
            if (error.response?.status === 404) {
                throw new Error(`R·∫°p ID ${cinemaId} kh√¥ng t·ªìn t·∫°i`);
            }

            const errorMessage = error.response?.data?.message || error.message || 'Kh√¥ng th·ªÉ import d·ªØ li·ªáu ph√≤ng chi·∫øu.';
            throw new Error(errorMessage);
        }
    }

    /**
     * T·∫£i template Excel cho import ph√≤ng (S·ª≠ d·ª•ng API backend)
     * GET /export-import/cinemas/template
     */
    async downloadCinemaTemplate(): Promise<Blob> {
        try {
            const response = await apiClient.get('/export-import/cinemas/template', {
                responseType: 'blob',
                headers: {
                    'Accept': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                }
            });

            return response.data;
        } catch (error: any) {
            const errorMessage = error.response?.data?.message || error.message || 'Kh√¥ng th·ªÉ t·∫£i template.';
            throw new Error(errorMessage);
        }
    }

    /**
     * T·∫£i xu·ªëng file blob
     */
    downloadFile(blob: Blob, filename: string) {
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
    }

    /**
     * T·∫°o t√™n file v·ªõi timestamp
     */
    generateFilename(prefix: string, extension: string = 'xlsx'): string {
        const date = new Date();
        const timestamp = date.toISOString().split('T')[0].replace(/-/g, '-');
        const time = date.toTimeString().split(' ')[0].replace(/:/g, '-');
        return `${prefix}-${timestamp}-${time}.${extension}`;
    }
}

// Export singleton instance
export const exportImportService = new ExportImportService();
export default exportImportService;
