// components/PaymentComponent.tsx
import React, { useState, useEffect, useRef } from "react";
import {
  ArrowLeftIcon,
  CheckCircleIcon,
  ClockIcon,
  LockClosedIcon,
  ShieldCheckIcon,
  XCircleIcon,
  MagnifyingGlassIcon,
  UserPlusIcon,
  BanknotesIcon,
  QrCodeIcon,
} from "@heroicons/react/24/outline";
import BookingProgress from "./BookingProgress";
import PayOSQRModal from "./PayOSQRModal";
import type { BookingSession } from "../types";
import { toast } from "react-hot-toast";
import api from "../config/api";
import { bookingService } from "../services/bookingService";
import { promotionService } from "../services/promotionService";
import { useCountdown } from "../hooks/useCountdown";

const mockPromoCodes = [
  { code: "CINEMA10", description: "Gi·∫£m 10,000ƒë", value: 10000 },
  { code: "MEGA50", description: "Gi·∫£m 50,000ƒë cho ƒë∆°n tr√™n 200k", value: 50000 },
  { code: "BOLTNEW", description: "Gi·∫£m 20% cho th√†nh vi√™n m·ªõi", value: 0.2 },
];

interface PaymentComponentProps {
  bookingSession: BookingSession;
  user: any;
  isAuthenticated: boolean;
  onBack: () => void;
  onPaymentSuccess: (bookingId: string, paymentResult: any) => void;
  onUpdateSession?: (updatedSession: BookingSession) => void;
}

const PaymentComponent: React.FC<PaymentComponentProps> = ({
  bookingSession,
  user,
  isAuthenticated,
  onBack,
  onPaymentSuccess,
  onUpdateSession,
}) => {
  // State variables
  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState<string>("");
  const [promoCode, setPromoCode] = useState<string>("");
  const [appliedDiscount, setAppliedDiscount] = useState<number>(0);
  const [pointsToUse, setPointsToUse] = useState<string>("");
  const [appliedPointsValue, setAppliedPointsValue] = useState<number>(0);
  const [isProcessing, setIsProcessing] = useState<boolean>(false);
  const [paymentError, setPaymentError] = useState<string | null>(null);
  const [showQRModal, setShowQRModal] = useState<boolean>(false);
  const [qrData, setQrData] = useState<any>(null);
  const [showConfirmDialog, setShowConfirmDialog] = useState<boolean>(false);
  const [showCreateCustomerForm, setShowCreateCustomerForm] = useState<boolean>(false);
  const [isCreatingCustomer, setIsCreatingCustomer] = useState<boolean>(false);
  const [promoError, setPromoError] = useState<string | null>(null);
  const [pointsError, setPointsError] = useState<string | null>(null);
  // üîß FIX: S·ª≠ d·ª•ng countdown service th·ªëng nh·∫•t
  const { timeLeft, isExpired, formattedTime } = useCountdown({
    bookingId: bookingSession?.bookingId || 0,
    showtimeId: bookingSession?.showtimeId || 0,
    duration: 5 * 60, // 5 ph√∫t
    onTimeout: async () => {
      console.log("‚è∞ Payment timeout - h·ªßy booking v√† quay v·ªÅ ch·ªçn gh·∫ø");

      try {
        // H·ªßy booking qua API
        if (bookingSession?.bookingId) {
          console.log(`üóëÔ∏è H·ªßy booking: ${bookingSession.bookingId}`);
          await api.put(`/bookings/${bookingSession.bookingId}/cancel`, {
            reason: "payment_timeout",
          });
          console.log("‚úÖ ƒê√£ h·ªßy booking th√†nh c√¥ng");
        }

        // X√≥a session storage
        if (bookingSession?.bookingId) {
          sessionStorage.removeItem(`booking_timestamp_${bookingSession.bookingId}`);
        }
        if (bookingSession?.showtimeId) {
          sessionStorage.removeItem(`booking_session_${bookingSession.showtimeId}`);
        }

        // Hi·ªÉn th·ªã th√¥ng b√°o
        toast.error("H·∫øt th·ªùi gian thanh to√°n! ƒêang chuy·ªÉn v·ªÅ trang ch·ªçn gh·∫ø...");

        // Chuy·ªÉn v·ªÅ trang ch·ªçn gh·∫ø sau 2 gi√¢y
        setTimeout(() => {
          onBack(); // G·ªçi callback ƒë·ªÉ quay v·ªÅ
        }, 2000);
      } catch (error) {
        console.error("‚ùå L·ªói khi h·ªßy booking:", error);
        toast.error("H·∫øt th·ªùi gian thanh to√°n! ƒêang chuy·ªÉn v·ªÅ trang ch·ªçn gh·∫ø...");
        setTimeout(() => {
          onBack();
        }, 2000);
      }
    }
  });
  const [userPoints, setUserPoints] = useState<number>(0);
  const [isLoadingPoints, setIsLoadingPoints] = useState<boolean>(false);
  const [isApplyingPromo, setIsApplyingPromo] = useState<boolean>(false);
  const [availablePromotions, setAvailablePromotions] = useState<any[]>([]);
  const [isLoadingPromotions, setIsLoadingPromotions] = useState<boolean>(false);
  const [showPromotionDropdown, setShowPromotionDropdown] = useState<boolean>(false);

  // Member search states for staff
  const [memberSearchQuery, setMemberSearchQuery] = useState<string>("");
  const [selectedMember, setSelectedMember] = useState<any>(null);
  const [isSearchingMember, setIsSearchingMember] = useState<boolean>(false);
  const [memberSearchResults, setMemberSearchResults] = useState<any[]>([]);
  const [showCreateCustomerModal, setShowCreateCustomerModal] = useState<boolean>(false);

  // Movie and showtime data
  const [movie, setMovie] = useState<any>(null);
  const [showtime, setShowtime] = useState<any>(null);
  const [isLoadingMovie, setIsLoadingMovie] = useState<boolean>(false);
  const [isLoadingShowtime, setIsLoadingShowtime] = useState<boolean>(false);

  // üîÑ Fetch user points from API
  useEffect(() => {
    const fetchUserPoints = async () => {
      if (!user || !user.User_ID) return;

      setIsLoadingPoints(true);
      try {
        console.log(`ƒêang l·∫•y th√¥ng tin ƒëi·ªÉm c·ªßa ng∆∞·ªùi d√πng ${user.User_ID}`);
        const response = await api.get(`/points/user/${user.User_ID}`);

        if (response.data && (response.data.success || response.data.data)) {
          const pointsData = response.data.data || response.data;
          const totalPoints = pointsData.total_points || 0;
          setUserPoints(totalPoints);
          console.log(`‚úÖ L·∫•y th√¥ng tin ƒëi·ªÉm th√†nh c√¥ng: ${totalPoints} ƒëi·ªÉm`);
        } else {
          console.warn("‚ùå API tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá:", response.data);
        }
      } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y th√¥ng tin ƒëi·ªÉm:", error);
      } finally {
        setIsLoadingPoints(false);
      }
    };

    fetchUserPoints();
    fetchAvailablePromotions();
  }, [user, bookingSession.bookingId]);

  // üîÑ Restore promotion v√† points state t·ª´ sessionStorage khi reload
  useEffect(() => {
    if (!bookingSession.showtimeId) return;

    const restorePaymentUIState = () => {
      try {
        const paymentStateKey = `payment_state_${bookingSession.showtimeId}`;
        const savedPaymentState = sessionStorage.getItem(paymentStateKey);

        if (savedPaymentState) {
          const paymentData = JSON.parse(savedPaymentState);
          const session = paymentData.paymentBookingSession;

          console.log('üîÑ [PAYMENT_UI] Restoring promotion and points state...');

          // Restore promotion state n·∫øu c√≥
          if (session.appliedPromotion) {
            console.log('üé´ [PAYMENT_UI] Restoring promotion:', session.appliedPromotion);
            setPromoCode(session.appliedPromotion.code || '');
            setAppliedDiscount(session.appliedPromotion.discountAmount || 0);
          }

          // Restore points state n·∫øu c√≥
          if (session.usedPoints && session.usedPoints > 0) {
            console.log('üíé [PAYMENT_UI] Restoring points:', session.usedPoints);
            setPointsToUse(session.usedPoints.toString());
            setAppliedPointsValue(session.usedPoints);
          }

          console.log('‚úÖ [PAYMENT_UI] Payment UI state restored successfully');
        }
      } catch (error) {
        console.error('‚ùå [PAYMENT_UI] Error restoring payment UI state:', error);
      }
    };

    restorePaymentUIState();
  }, [bookingSession.showtimeId]);

  // üéØ L·∫•y danh s√°ch m√£ khuy·∫øn m√£i ph√π h·ª£p
  const fetchAvailablePromotions = async () => {
    if (!bookingSession.bookingId) {
      console.log("Ch∆∞a c√≥ booking ID, b·ªè qua vi·ªác l·∫•y m√£ khuy·∫øn m√£i");
      return;
    }

    try {
      setIsLoadingPromotions(true);

      const promotions = await promotionService.getAvailablePromotionsForBooking(
        bookingSession.bookingId,
        bookingSession.totalAmount || 0
      );

      setAvailablePromotions(promotions);
    } catch (error) {
      console.error("L·ªói khi l·∫•y m√£ khuy·∫øn m√£i:", error);
      setAvailablePromotions([]);
    } finally {
      setIsLoadingPromotions(false);
    }
  };

  // üéØ √Åp d·ª•ng m√£ khuy·∫øn m√£i t·ª´ dropdown
  const handleApplyPromotionFromDropdown = async (promotionCode: string) => {
    setPromoCode(promotionCode);
    setShowPromotionDropdown(false);

    // T·ª± ƒë·ªông √°p d·ª•ng m√£
    if (!bookingSession.bookingId) {
      setPromoError("Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë∆°n h√†ng");
      return;
    }

    try {
      setIsApplyingPromo(true);
      setPromoError(null);

      const response = await bookingService.applyPromotion({
        bookingId: bookingSession.bookingId,
        promoCode: promotionCode,
      });

      if (response.success) {
        const discountAmount = response.discount_amount || 0;
        setAppliedDiscount(discountAmount);
        setPromoCode("");
        toast.success(`ƒê√£ √°p d·ª•ng m√£ gi·∫£m gi√°: -${discountAmount.toLocaleString("vi-VN")}ƒë`);

        // C·∫≠p nh·∫≠t session v·ªõi th√¥ng tin promotion
        if (onUpdateSession) {
          const updatedSession = {
            ...bookingSession,
            appliedPromotion: {
              code: promotionCode,
              discountAmount: discountAmount
            }
          };
          onUpdateSession(updatedSession);
          console.log('‚úÖ [PAYMENT] Updated session with promotion:', updatedSession.appliedPromotion);
        }

        // Refresh danh s√°ch m√£ khuy·∫øn m√£i
        await fetchAvailablePromotions();
      } else {
        setPromoError(response.message || "Kh√¥ng th·ªÉ √°p d·ª•ng m√£ gi·∫£m gi√°");
      }
    } catch (error: any) {
      console.error("L·ªói khi √°p d·ª•ng m√£ gi·∫£m gi√°:", error);
      const errorMessage = error.response?.data?.message || error.message || "Kh√¥ng th·ªÉ √°p d·ª•ng m√£ gi·∫£m gi√°";
      setPromoError(errorMessage);
    } finally {
      setIsApplyingPromo(false);
    }
  };

  // üéØ X√≥a m√£ khuy·∫øn m√£i ƒë√£ √°p d·ª•ng
  const handleRemovePromotion = async () => {
    if (!bookingSession.bookingId) {
      return;
    }

    try {
      setIsApplyingPromo(true);
      setPromoError(null);

      const response = await bookingService.removePromotion(bookingSession.bookingId);

      if (response.success) {
        setAppliedDiscount(0);
        setPromoCode("");
        toast.success("ƒê√£ x√≥a m√£ gi·∫£m gi√°");

        // C·∫≠p nh·∫≠t session ƒë·ªÉ x√≥a th√¥ng tin promotion
        if (onUpdateSession) {
          const updatedSession = {
            ...bookingSession
          };
          // X√≥a appliedPromotion n·∫øu c√≥
          if ('appliedPromotion' in updatedSession) {
            delete updatedSession.appliedPromotion;
          }
          onUpdateSession(updatedSession);
          console.log('‚úÖ [PAYMENT] Removed promotion from session');
        }

        // Refresh danh s√°ch m√£ khuy·∫øn m√£i
        await fetchAvailablePromotions();
      } else {
        setPromoError(response.message || "Kh√¥ng th·ªÉ x√≥a m√£ gi·∫£m gi√°");
      }
    } catch (error: any) {
      console.error("L·ªói khi x√≥a m√£ gi·∫£m gi√°:", error);
      const errorMessage = error.response?.data?.message || error.message || "Kh√¥ng th·ªÉ x√≥a m√£ gi·∫£m gi√°";
      setPromoError(errorMessage);
    } finally {
      setIsApplyingPromo(false);
    }
  };

  // üóëÔ∏è X√≥a ƒëi·ªÉm ƒë√£ s·ª≠ d·ª•ng
  const handleRemovePoints = async () => {
    if (!bookingSession.bookingId) {
      return;
    }

    try {
      setIsProcessing(true);
      setPointsError(null);

      const response = await bookingService.removePointsFromBooking(bookingSession.bookingId);

      if (response.success) {
        // Ho√†n l·∫°i ƒëi·ªÉm cho user
        setUserPoints((prev) => prev + appliedPointsValue);
        setAppliedPointsValue(0);
        setPointsToUse("");
        toast.success("ƒê√£ x√≥a ƒëi·ªÉm v√† ho√†n l·∫°i v√†o t√†i kho·∫£n");

        // C·∫≠p nh·∫≠t session ƒë·ªÉ x√≥a th√¥ng tin points
        if (onUpdateSession) {
          const updatedSession = {
            ...bookingSession
          };
          // X√≥a usedPoints n·∫øu c√≥
          if ('usedPoints' in updatedSession) {
            delete updatedSession.usedPoints;
          }
          onUpdateSession(updatedSession);
          console.log('‚úÖ [PAYMENT] Removed points from session');
        }
      } else {
        setPointsError(response.message || "Kh√¥ng th·ªÉ x√≥a ƒëi·ªÉm");
      }
    } catch (error: any) {
      console.error("L·ªói khi x√≥a ƒëi·ªÉm:", error);
      const errorMessage = error.response?.data?.message || error.message || "Kh√¥ng th·ªÉ x√≥a ƒëi·ªÉm";
      setPointsError(errorMessage);
    } finally {
      setIsProcessing(false);
    }
  };

  // üéØ X·ª≠ l√Ω √°p d·ª•ng m√£ gi·∫£m gi√°
  const handleApplyPromoCode = async () => {
    if (!promoCode.trim()) {
      setPromoError("Vui l√≤ng nh·∫≠p m√£ gi·∫£m gi√°");
      return;
    }

    if (!bookingSession.bookingId) {
      setPromoError("Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë∆°n h√†ng");
      return;
    }

    try {
      setIsApplyingPromo(true);
      setPromoError(null);

      const response = await bookingService.applyPromotion({
        bookingId: bookingSession.bookingId,
        promoCode: promoCode.trim(),
      });

      if (response.success) {
        setAppliedDiscount(response.discount_amount || 0);
        setPromoCode("");
        toast.success(`ƒê√£ √°p d·ª•ng m√£ gi·∫£m gi√°: -${(response.discount_amount || 0).toLocaleString("vi-VN")}ƒë`);
      } else {
        setPromoError(response.message || "Kh√¥ng th·ªÉ √°p d·ª•ng m√£ gi·∫£m gi√°");
      }
    } catch (error: any) {
      console.error("L·ªói khi √°p d·ª•ng m√£ gi·∫£m gi√°:", error);
      const errorMessage = error?.response?.data?.message || error?.message || "C√≥ l·ªói x·∫£y ra khi √°p d·ª•ng m√£ gi·∫£m gi√°";
      setPromoError(errorMessage);
    } finally {
      setIsApplyingPromo(false);
    }
  };

  // ÔøΩ T√¨m ki·∫øm member b·∫±ng phone
  const searchMemberByPhone = async (phone: string) => {
    try {
      setIsSearchingMember(true);
      const response = await api.get(`/member/lookup/phone/${phone}`);
      return response.data;
    } catch (error) {
      console.error("L·ªói t√¨m ki·∫øm member b·∫±ng phone:", error);
      throw error;
    } finally {
      setIsSearchingMember(false);
    }
  };

  // üîç T√¨m ki·∫øm member b·∫±ng email
  const searchMemberByEmail = async (email: string) => {
    try {
      setIsSearchingMember(true);
      const response = await api.get(`/member/lookup/email/${email}`);
      return response.data;
    } catch (error) {
      console.error("L·ªói t√¨m ki·∫øm member b·∫±ng email:", error);
      throw error;
    } finally {
      setIsSearchingMember(false);
    }
  };

  // üîó Li√™n k·∫øt booking v·ªõi member
  const linkBookingToMember = async (memberId: number, memberData?: any) => {
    try {
      console.log("üîó B·∫Øt ƒë·∫ßu li√™n k·∫øt booking v·ªõi member:", { memberId, bookingId: bookingSession.bookingId, memberData });

      // T√¨m member ƒë·ªÉ l·∫•y phone ho·∫∑c email l√†m memberIdentifier
      // ∆Øu ti√™n memberData ƒë∆∞·ª£c truy·ªÅn v√†o, sau ƒë√≥ selectedMember, cu·ªëi c√πng memberSearchResults
      let member = memberData || selectedMember;

      console.log("üîç Debug linkBookingToMember:", {
        memberId,
        memberData,
        selectedMember,
        selectedMemberUserId: selectedMember?.User_ID,
        memberSearchResults: memberSearchResults.length,
        memberSearchResultsIds: memberSearchResults.map(m => m.User_ID)
      });

      // N·∫øu kh√¥ng c√≥ memberData v√† selectedMember kh√¥ng kh·ªõp ID, t√¨m trong memberSearchResults
      if (!member || member.User_ID !== memberId) {
        console.log("üîç member kh√¥ng kh·ªõp, t√¨m trong memberSearchResults...");
        member = memberSearchResults.find((m: any) => m.User_ID === memberId);
      }

      if (!member) {
        console.error("‚ùå Kh√¥ng t√¨m th·∫•y member v·ªõi ID:", memberId);
        console.error("memberData:", memberData);
        console.error("selectedMember:", selectedMember);
        console.error("memberSearchResults:", memberSearchResults);
        throw new Error("Kh√¥ng t√¨m th·∫•y th√¥ng tin member");
      }

      // S·ª≠ d·ª•ng phone ho·∫∑c email l√†m memberIdentifier
      const memberIdentifier = member.Phone_Number || member.Email;
      if (!memberIdentifier) {
        console.error("‚ùå Member kh√¥ng c√≥ phone ho·∫∑c email:", member);
        throw new Error("Member kh√¥ng c√≥ phone ho·∫∑c email");
      }

      console.log("üîó Th√¥ng tin li√™n k·∫øt:", {
        bookingId: bookingSession.bookingId,
        memberIdentifier,
        memberName: member.Full_Name,
        memberId: member.User_ID
      });

      const response = await api.post("/member/link-member", {
        bookingId: parseInt(bookingSession.bookingId || "0"),
        memberIdentifier: memberIdentifier,
      });

      console.log("‚úÖ Li√™n k·∫øt th√†nh c√¥ng:", response.data);
      return response.data;
    } catch (error) {
      console.error("‚ùå L·ªói li√™n k·∫øt booking v·ªõi member:", error);
      throw error;
    }
  };

  // üë§ T·∫°o t√†i kho·∫£n m·ªõi cho kh√°ch h√†ng
  const createNewCustomer = async (customerData: any) => {
    try {
      const response = await api.post("/user/staff-register", customerData);
      return response.data;
    } catch (error) {
      console.error("L·ªói t·∫°o t√†i kho·∫£n kh√°ch h√†ng:", error);
      throw error;
    }
  };

  // üîç X·ª≠ l√Ω t√¨m ki·∫øm member
  const handleMemberSearch = async () => {
    if (!memberSearchQuery.trim()) {
      toast.error("Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i ho·∫∑c email");
      return;
    }

    try {
      setIsSearchingMember(true);
      let result = null;

      // Ki·ªÉm tra xem l√† email hay phone
      const isEmail = memberSearchQuery.includes("@");

      console.log("üîç T√¨m ki·∫øm member:", {
        query: memberSearchQuery.trim(),
        isEmail,
        endpoint: isEmail
          ? `/member/lookup/email/${memberSearchQuery.trim()}`
          : `/member/lookup/phone/${memberSearchQuery.trim()}`,
      });

      if (isEmail) {
        result = await searchMemberByEmail(memberSearchQuery.trim());
      } else {
        result = await searchMemberByPhone(memberSearchQuery.trim());
      }

      console.log("üìã K·∫øt qu·∫£ API:", result);

      // Ki·ªÉm tra n·∫øu c√≥ data (API tr·∫£ v·ªÅ tr·ª±c ti·∫øp ho·∫∑c trong result.data)
      const memberData = result?.data || result;

      if (memberData && memberData.User_ID) {
        console.log("‚úÖ T√¨m th·∫•y member:", memberData);
        toast.success("T√¨m th·∫•y th√†nh vi√™n!");

        // L·∫•y ƒëi·ªÉm c·ªßa member t√¨m ƒë∆∞·ª£c ƒë·ªÉ hi·ªÉn th·ªã
        try {
          console.log("üéØ L·∫•y ƒëi·ªÉm cho User_ID:", memberData.User_ID);
          const pointsResponse = await api.get(`/points/user/${memberData.User_ID}`);
          console.log("üí∞ K·∫øt qu·∫£ ƒëi·ªÉm:", pointsResponse.data);

          if (pointsResponse.data && pointsResponse.data.success) {
            // L∆∞u ƒëi·ªÉm v√†o member data ƒë·ªÉ hi·ªÉn th·ªã
            memberData.points = pointsResponse.data.data.total_points || 0;
          } else {
            memberData.points = 0;
          }
        } catch (error) {
          console.error("‚ùå L·ªói khi l·∫•y ƒëi·ªÉm c·ªßa member:", error);
          memberData.points = 0;
        }

        // Hi·ªÉn th·ªã k·∫øt qu·∫£ t√¨m ki·∫øm ƒë·ªÉ user c√≥ th·ªÉ ch·ªçn
        console.log("üìù Set member search results:", [memberData]);
        setMemberSearchResults([memberData]);
        // Kh√¥ng reset selectedMember n·∫øu ƒë√£ c√≥ member ƒë∆∞·ª£c ch·ªçn t·ª´ vi·ªác t·∫°o m·ªõi
        // setSelectedMember(null); // Reset selected member ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£ t√¨m ki·∫øm
      } else {
        console.log("‚ùå Kh√¥ng t√¨m th·∫•y member ho·∫∑c k·∫øt qu·∫£ kh√¥ng h·ª£p l·ªá:", result);
        setMemberSearchResults([]);
        setSelectedMember(null);
        toast.error("Kh√¥ng t√¨m th·∫•y th√†nh vi√™n");
      }
    } catch (error: any) {
      console.error("‚ùå L·ªói t√¨m ki·∫øm member:", error);
      console.error("Chi ti·∫øt l·ªói:", {
        message: error.message,
        response: error.response?.data,
        status: error.response?.status,
      });
      setMemberSearchResults([]);
      const errorMessage = error?.response?.data?.message || "Kh√¥ng t√¨m th·∫•y th√†nh vi√™n";
      toast.error(errorMessage);
    } finally {
      setIsSearchingMember(false);
    }
  };

  // ÔøΩüîÑ Restore additional data t·ª´ sessionStorage n·∫øu c·∫ßn
  const getAdditionalData = () => {
    const pathParts = window.location.pathname.split("/");
    const bookingId = pathParts[pathParts.length - 1];

    if (bookingId) {
      const sessionKey = `booking_session_${bookingId}`;
      const savedData = sessionStorage.getItem(sessionKey);

      if (savedData) {
        try {
          const parsedData = JSON.parse(savedData);
          return {
            movie: parsedData.movie,
            theater: parsedData.theater,
            showtime: parsedData.showtime,
          };
        } catch (error) {
          console.error("‚ùå Failed to parse saved booking session:", error);
        }
      }
    }

    return {
      movie: null,
      theater: null,
      showtime: null,
    };
  };

  // üé¨ Load d·ªØ li·ªáu movie t·ª´ API ho·∫∑c sessionStorage
  useEffect(() => {
    const loadMovieData = async () => {
      // üîß Th·ª≠ l·∫•y movieId t·ª´ nhi·ªÅu ngu·ªìn kh√°c nhau
      let movieId = bookingSession?.movieId;

      if (!movieId) {
        // Th·ª≠ l·∫•y t·ª´ sessionStorage v·ªõi c√°c key kh√°c nhau
        const possibleKeys = [
          `booking_session_${bookingSession?.bookingId}`,
          `booking_session_${bookingSession?.showtimeId}`,
          "has_pending_booking",
        ];

        for (const key of possibleKeys) {
          try {
            const savedData = sessionStorage.getItem(key);
            if (savedData) {
              const parsedData = JSON.parse(savedData);
              if (parsedData.movieId) {
                movieId = parsedData.movieId;
                console.log(`üîç Found movieId from ${key}: ${movieId}`);
                break;
              }
            }
          } catch (error) {
            console.warn(`‚ö†Ô∏è Error parsing ${key}:`, error);
          }
        }
      }

      if (!movieId) {
        console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y movie ID t·ª´ b·∫•t k·ª≥ ngu·ªìn n√†o");
        setMovie(null);
        setIsLoadingMovie(false);
        return;
      }

      // 1. Th·ª≠ l·∫•y t·ª´ sessionStorage tr∆∞·ªõc
      const sessionKey = `booking_session_${bookingSession?.bookingId}`;
      const savedData = sessionStorage.getItem(sessionKey);

      if (savedData) {
        try {
          const parsedData = JSON.parse(savedData);
          console.log("üìã D·ªØ li·ªáu t·ª´ sessionStorage:", parsedData);

          if (parsedData.movie) {
            setMovie(parsedData.movie);
            setIsLoadingMovie(false);
            return;
          }
        } catch (error) {
          console.error("‚ùå L·ªói parse sessionStorage:", error);
        }
      }

      // 2. N·∫øu kh√¥ng c√≥, fetch t·ª´ API
      try {
        setIsLoadingMovie(true);
        console.log(`üé¨ ƒêang t·∫£i th√¥ng tin phim ID: ${movieId}`);

        const response = await api.get(`/movies/${movieId}`);
        console.log("‚úÖ Th√¥ng tin phim t·ª´ API:", response.data);
        setMovie(response.data);
      } catch (error) {
        console.error("‚ùå L·ªói fetch movie:", error);
        setMovie(null);
      } finally {
        setIsLoadingMovie(false);
      }
    };

    loadMovieData();
  }, [bookingSession?.movieId, bookingSession?.bookingId, bookingSession?.showtimeId]);

  // üé≠ Load d·ªØ li·ªáu showtime t·ª´ API
  useEffect(() => {
    const loadShowtimeData = async () => {
      // üîß Th·ª≠ l·∫•y showtimeId t·ª´ nhi·ªÅu ngu·ªìn kh√°c nhau
      let showtimeId = bookingSession?.showtimeId;

      if (!showtimeId) {
        // Th·ª≠ l·∫•y t·ª´ URL
        const urlParts = window.location.pathname.split("/");
        const urlShowtimeId = urlParts[urlParts.length - 1];
        if (urlShowtimeId && !isNaN(Number(urlShowtimeId))) {
          showtimeId = urlShowtimeId;
          console.log(`üîç Found showtimeId from URL: ${showtimeId}`);
        }
      }

      if (!showtimeId) {
        // Th·ª≠ l·∫•y t·ª´ sessionStorage v·ªõi c√°c key kh√°c nhau
        const possibleKeys = [
          `booking_session_${bookingSession?.bookingId}`,
          `booking_session_${bookingSession?.showtimeId}`,
          "has_pending_booking",
        ];

        for (const key of possibleKeys) {
          try {
            const savedData = sessionStorage.getItem(key);
            if (savedData) {
              const parsedData = JSON.parse(savedData);
              if (parsedData.showtimeId) {
                showtimeId = parsedData.showtimeId;
                console.log(`üîç Found showtimeId from ${key}: ${showtimeId}`);
                break;
              }
            }
          } catch (error) {
            console.warn(`‚ö†Ô∏è Error parsing ${key}:`, error);
          }
        }
      }

      if (!showtimeId) {
        console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y showtime ID t·ª´ b·∫•t k·ª≥ ngu·ªìn n√†o");
        setShowtime(null);
        setIsLoadingShowtime(false);
        return;
      }

      try {
        setIsLoadingShowtime(true);
        console.log(`üé≠ ƒêang t·∫£i th√¥ng tin showtime ID: ${showtimeId}`);

        const response = await api.get(`/showtimes/${showtimeId}`);
        console.log("‚úÖ Th√¥ng tin showtime t·ª´ API:", response.data);
        setShowtime(response.data);
      } catch (error) {
        console.error("‚ùå L·ªói fetch showtime:", error);
        setShowtime(null);
      } finally {
        setIsLoadingShowtime(false);
      }
    };

    loadShowtimeData();
  }, [bookingSession?.showtimeId, bookingSession?.bookingId]);

  // üîÑ Restore user data t·ª´ localStorage v√† auto-select payment method
  useEffect(() => {
    const token = localStorage.getItem("token");
    const userData = localStorage.getItem("user");

    if (token && userData) {
      try {
        const parsedUser = JSON.parse(userData);
        console.log("üë§ User data loaded:", parsedUser);
      } catch (error) {
        console.error("‚ùå Failed to parse user data:", error);
      }
    }

    // Auto-select PayOS cho user th∆∞·ªùng (kh√¥ng ph·∫£i staff)
    const userRole = user?.role || user?.Role;
    if (!["Staff", "Admin", "Manager"].includes(userRole)) {
      setSelectedPaymentMethod("payos");
      console.log("üîÑ Auto-selected PayOS for regular user");
    }
  }, [user]);

  // ‚úÖ Countdown timer ƒë√£ ƒë∆∞·ª£c thay th·∫ø b·∫±ng useCountdown hook

  // üîß X·ª≠ l√Ω selectedSeats - c√≥ th·ªÉ l√† string ho·∫∑c array
  const processedSeats = React.useMemo(() => {
    console.log("üîß [PAYMENT] Processing seats:", {
      selectedSeats: bookingSession.selectedSeats,
      type: typeof bookingSession.selectedSeats,
      isArray: Array.isArray(bookingSession.selectedSeats),
    });

    if (!bookingSession.selectedSeats) return [];

    // N·∫øu l√† string, convert th√†nh array
    if (typeof bookingSession.selectedSeats === "string") {
      const seatLabels = bookingSession.selectedSeats
        .split(",")
        .map((s) => s.trim())
        .filter(Boolean);
      const processedArray = seatLabels.map((seatLabel) => {
        const row = seatLabel.charAt(0);
        const number = parseInt(seatLabel.slice(1));
        return {
          id: seatLabel,
          row: row,
          number: number,
          type: "standard" as const,
          price: 90000,
          status: "selected" as const,
        };
      });
      console.log("‚úÖ [PAYMENT] Converted string to seats:", processedArray);
      return processedArray;
    }

    // N·∫øu ƒë√£ l√† array, return as is
    if (Array.isArray(bookingSession.selectedSeats)) {
      console.log("‚úÖ [PAYMENT] Using existing array:", bookingSession.selectedSeats);
      return bookingSession.selectedSeats;
    }

    console.log("‚ö†Ô∏è [PAYMENT] Unknown selectedSeats format, returning empty array");
    return [];
  }, [bookingSession.selectedSeats]);

  // üí∞ T√≠nh to√°n gi√° ti·ªÅn v·ªõi fallback
  const subtotal =
    bookingSession.totalPrice || processedSeats?.reduce((sum, seat) => sum + (seat.price || 90000), 0) || 0;
  const serviceFee = 0;
  const total = Math.max(0, subtotal + serviceFee - appliedDiscount - appliedPointsValue);

  // üìä Booking steps for progress
  const bookingSteps = [
    { id: 1, name: "seats", title: "Ch·ªçn gh·∫ø", completed: true, active: false },
    { id: 2, name: "payment", title: "Thanh to√°n", completed: false, active: true },
    { id: 3, name: "confirmation", title: "X√°c nh·∫≠n", completed: false, active: false },
  ];

  // üîÑ Payment handlers
  const handleCashPayment = async () => {
    if (!bookingSession.bookingId) {
      toast.error("Vui l√≤ng ƒë·ª£i h·ªá th·ªëng t·∫°o ƒë∆°n h√†ng");
      return;
    }

    const userRole = user?.role || user?.Role;
    if (!["Staff", "Admin", "Manager"].includes(userRole)) {
      toast.error("Ch·ªâ nh√¢n vi√™n m·ªõi c√≥ quy·ªÅn thanh to√°n ti·ªÅn m·∫∑t");
      return;
    }

    setIsProcessing(true);
    setPaymentError(null);

    try {
      toast.loading("ƒêang x·ª≠ l√Ω thanh to√°n ti·ªÅn m·∫∑t...");

      // G·ªçi API thanh to√°n ti·ªÅn m·∫∑t
      const response = await api.put(`/bookings/${bookingSession.bookingId}/payment`);

      toast.dismiss();

      // Ki·ªÉm tra k·∫øt qu·∫£ thanh to√°n
      if (response.data && response.data.success) {
        toast.success("Thanh to√°n ti·ªÅn m·∫∑t th√†nh c√¥ng!");

        // X√≥a session timer khi thanh to√°n th√†nh c√¥ng
        if (bookingSession && processedSeats) {
          const seatIds = processedSeats.map((seat) => seat.id || seat.seatId || "unknown").join("_");
          const sessionKey = `payment_timer_${bookingSession.showtimeId}_${seatIds}`;
          sessionStorage.removeItem(sessionKey);
          console.log(`Thanh to√°n th√†nh c√¥ng - ƒë√£ x√≥a session timer: ${sessionKey}`);
        }

        // G·ªçi callback success
        setTimeout(() => {
          onPaymentSuccess(bookingSession.bookingId, {
            success: true,
            transactionId: `CASH-${bookingSession.bookingId}-${Date.now()}`,
            method: "Cash",
          });
        }, 1500);
      } else {
        throw new Error(response.data?.message || "Thanh to√°n ti·ªÅn m·∫∑t th·∫•t b·∫°i");
      }
    } catch (error: any) {
      toast.dismiss();
      const errorMessage =
        error.response?.data?.message || error.message || "Thanh to√°n ti·ªÅn m·∫∑t th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.";
      toast.error(errorMessage);
      setPaymentError(errorMessage);
    } finally {
      setIsProcessing(false);
    }
  };

  const handlePayOSPayment = async () => {
    if (!bookingSession.bookingId) {
      toast.error("Vui l√≤ng ƒë·ª£i h·ªá th·ªëng t·∫°o ƒë∆°n h√†ng");
      return;
    }

    // M·ªü PayOS QR Modal
    setShowQRModal(true);
  };

  const handlePayment = async () => {
    const userRole = user?.role || user?.Role;
    const isStaff = ["Staff", "Admin", "Manager"].includes(userRole);

    // N·∫øu l√† user th∆∞·ªùng, t·ª± ƒë·ªông m·ªü QR Code
    if (!isStaff) {
      await handlePayOSPayment();
      return;
    }

    if (selectedPaymentMethod === "cash") {
      await handleCashPayment();
    } else if (selectedPaymentMethod === "payos") {
      await handlePayOSPayment();
    } else {
      toast.error("Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n");
    }
  };

  // X·ª≠ l√Ω √°p d·ª•ng ƒëi·ªÉm
  const handleApplyPoints = async () => {
    if (!pointsToUse.trim() || isProcessing) {
      return;
    }

    // Ki·ªÉm tra xem c√≥ member ƒë∆∞·ª£c ch·ªçn kh√¥ng (cho staff)
    const isStaff = ["Staff", "Admin", "Manager"].includes(user?.role || user?.Role);
    if (isStaff && !selectedMember) {
      setPointsError("Vui l√≤ng ch·ªçn kh√°ch h√†ng tr∆∞·ªõc khi s·ª≠ d·ª•ng ƒëi·ªÉm");
      return;
    }

    setIsProcessing(true);
    setPointsError(null);

    try {
      const points = parseInt(pointsToUse);

      // Ki·ªÉm tra h·ª£p l·ªá
      if (isNaN(points) || points <= 0) {
        setPointsError("S·ªë ƒëi·ªÉm kh√¥ng h·ª£p l·ªá");
        return;
      }

      // Ki·ªÉm tra ƒë·ªß ƒëi·ªÉm
      if (points > userPoints) {
        const memberName = selectedMember ? selectedMember.Full_Name : "B·∫°n";
        setPointsError(`${memberName} ch·ªâ c√≥ ${userPoints.toLocaleString("vi-VN")} ƒëi·ªÉm`);
        return;
      }

      // Gi·ªõi h·∫°n ƒëi·ªÉm s·ª≠ d·ª•ng kh√¥ng v∆∞·ª£t qu√° t·ªïng ti·ªÅn
      const maxPoints = subtotal - appliedDiscount; // 1 ƒëi·ªÉm = 1ƒë
      if (points > maxPoints) {
        setPointsError(`ƒêi·ªÉm s·ª≠ d·ª•ng t·ªëi ƒëa: ${maxPoints.toLocaleString("vi-VN")}`);
        return;
      }

      // T√≠nh gi√° tr·ªã ƒëi·ªÉm (1 ƒëi·ªÉm = 1 ƒë·ªìng)
      const pointsValue = points;

      if (bookingSession.bookingId) {
        try {
          // Chuy·ªÉn ƒë·ªïi bookingId th√†nh s·ªë (n·∫øu l√† chu·ªói)
          const numericBookingId = Number(bookingSession.bookingId);

          if (isNaN(numericBookingId)) {
            setPointsError(`ID ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá: ${bookingSession.bookingId}`);
            return;
          }

          // Ki·ªÉm tra l·∫°i tham s·ªë points
          if (!Number.isInteger(points) || points <= 0) {
            setPointsError("S·ªë ƒëi·ªÉm ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng");
            return;
          }

          console.log("G·ª≠i request v·ªõi tham s·ªë:", {
            bookingId: numericBookingId,
            pointsToUse: points,
          });

          // G·ªçi API v·ªõi endpoint v√† tham s·ªë ƒë√∫ng
          const response = await api.post(`/points/booking/${numericBookingId}/apply-discount`, {
            pointsToUse: points,
          });

          console.log("K·∫øt qu·∫£ t·ª´ API:", response.data);

          if (response.data && response.data.success) {
            setAppliedPointsValue(pointsValue);
            setUserPoints((prev) => Math.max(0, prev - points)); // C·∫≠p nh·∫≠t l·∫°i s·ªë ƒëi·ªÉm sau khi s·ª≠ d·ª•ng
            setPointsToUse("");
            toast.success(
              `ƒê√£ s·ª≠ d·ª•ng ${points.toLocaleString("vi-VN")} ƒëi·ªÉm ƒë·ªÉ gi·∫£m gi√° ${pointsValue.toLocaleString("vi-VN")}ƒë`
            );

            // C·∫≠p nh·∫≠t session v·ªõi th√¥ng tin points
            if (onUpdateSession) {
              const updatedSession = {
                ...bookingSession,
                usedPoints: points
              };
              onUpdateSession(updatedSession);
              console.log('‚úÖ [PAYMENT] Updated session with points:', points);
            }
          } else {
            throw new Error(response.data?.message || "Kh√¥ng th·ªÉ √°p d·ª•ng ƒëi·ªÉm");
          }
        } catch (error: any) {
          console.error("L·ªói khi √°p d·ª•ng ƒëi·ªÉm:", error);
          const errorMessage = error.response?.data?.message || error.message || "Kh√¥ng th·ªÉ √°p d·ª•ng ƒëi·ªÉm";
          setPointsError(errorMessage);

          // Log chi ti·∫øt l·ªói ƒë·ªÉ debug
          if (error.response?.data) {
            console.error("Chi ti·∫øt l·ªói:", error.response.data);
            if (error.response.data.error) {
              setPointsError(`${errorMessage}: ${error.response.data.error}`);
            }
          }
        }
      } else {
        // N·∫øu ch∆∞a c√≥ booking ID, ch·ªâ c·∫≠p nh·∫≠t giao di·ªán
        setAppliedPointsValue(pointsValue);
        setUserPoints((prev) => Math.max(0, prev - points)); // C·∫≠p nh·∫≠t l·∫°i s·ªë ƒëi·ªÉm sau khi s·ª≠ d·ª•ng
        setPointsToUse("");
        toast.success(
          `ƒê√£ s·ª≠ d·ª•ng ${points.toLocaleString("vi-VN")} ƒëi·ªÉm ƒë·ªÉ gi·∫£m gi√° ${pointsValue.toLocaleString("vi-VN")}ƒë`
        );
      }
    } finally {
      setIsProcessing(false);
    }
  };

  if (!bookingSession) return null;

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950">
      {/* Header with back button */}
      <div className="bg-slate-800/50 backdrop-blur-sm border-b border-slate-700/50 mt-20 lg:mt-24 pt-4">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <button
              onClick={onBack}
              className="flex items-center gap-2 text-gray-300 hover:text-white transition-colors"
            >
              <ArrowLeftIcon className="w-5 h-5" />
              <span>Quay l·∫°i</span>
            </button>

            {/* Timer */}
            <div className="flex items-center gap-2 text-[#FFD875]">
              <ClockIcon className="w-5 h-5" />
              <span className="font-mono text-lg">{isExpired ? "00:00" : formattedTime}</span>
            </div>
          </div>
        </div>
      </div>

      {/* Booking Progress */}
      <div className="container mx-auto px-4 py-6">
        <BookingProgress steps={bookingSteps} currentStep={2} />
      </div>

      {/* Main content */}
      <div className="container mx-auto px-4 pb-8">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Left Column - Payment Methods */}
          <div className="lg:col-span-2 space-y-6">
            {/* Member Search - Ch·ªâ hi·ªÉn th·ªã cho Staff/Admin/Manager */}
            {["Staff", "Admin", "Manager"].includes(user?.role || user?.Role) && (
              <div className="bg-gradient-to-br from-slate-800/95 via-slate-900/95 to-slate-800/95 backdrop-blur-xl rounded-3xl p-8 border border-slate-700/30 shadow-2xl">
                <div className="flex items-center gap-3 mb-8">
                  <MagnifyingGlassIcon className="w-6 h-6 text-[#FFD875]" />
                  <h3 className="text-2xl font-bold bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent">
                    T√¨m ki·∫øm kh√°ch h√†ng
                  </h3>
                </div>

                <div className="space-y-4">
                  {/* Search Input */}
                  <div className="relative">
                    <input
                      type="text"
                      value={memberSearchQuery}
                      onChange={(e) => setMemberSearchQuery(e.target.value)}
                      placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i (10-11 s·ªë) ho·∫∑c email..."
                      className="w-full pl-4 pr-32 py-4 bg-slate-700/50 border border-slate-600/50 rounded-2xl focus:outline-none focus:ring-2 focus:ring-[#FFD875]/50 focus:border-[#FFD875]/50 text-white placeholder-gray-400 transition-all duration-300"
                      onKeyDown={(e) => {
                        if (e.key === "Enter") {
                          handleMemberSearch();
                        }
                      }}
                    />
                    <button
                      onClick={handleMemberSearch}
                      disabled={!memberSearchQuery.trim() || isSearchingMember}
                      className="absolute right-2 top-2 bottom-2 px-6 bg-[#FFD875] hover:bg-[#FFA500] text-slate-900 font-semibold rounded-xl transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2 shadow-lg"
                    >
                      {isSearchingMember ? (
                        <>
                          <div className="animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full"></div>
                          <span className="hidden sm:inline">ƒêang t√¨m...</span>
                        </>
                      ) : (
                        <span>T√¨m ki·∫øm</span>
                      )}
                    </button>
                  </div>

                  {/* Action Buttons */}
                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <button
                      onClick={() => setShowCreateCustomerModal(true)}
                      className="group px-6 py-4 bg-[#FFD875] hover:bg-[#FFA500] text-slate-900 font-semibold rounded-2xl transition-all duration-300 flex items-center justify-center gap-3 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5"
                    >
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                      </svg>
                      <span>T·∫°o t√†i kho·∫£n m·ªõi</span>
                    </button>

                    <button
                      onClick={() => {
                        setSelectedMember(null);
                        setMemberSearchResults([]);
                        setMemberSearchQuery("");
                      }}
                      className="group px-6 py-4 bg-slate-700 hover:bg-slate-600 text-white font-semibold rounded-2xl transition-all duration-300 flex items-center justify-center gap-3 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5"
                    >
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
                        />
                      </svg>
                      <span>Kh√°ch v√£ng lai</span>
                    </button>
                  </div>

                  {/* Member Search Results */}
                  {memberSearchResults.length > 0 && !selectedMember && (
                    <div className="space-y-4">
                      <div className="flex items-center gap-2">
                        <div className="w-2 h-2 bg-[#FFD875] rounded-full"></div>
                        <h4 className="text-white font-semibold">K·∫øt qu·∫£ t√¨m ki·∫øm</h4>
                      </div>
                      <div className="space-y-3">
                        {memberSearchResults.map((member, index) => (
                          <div
                            key={index}
                            className="group bg-gradient-to-r from-slate-700/60 to-slate-800/60 border border-slate-600/50 rounded-2xl p-5 hover:border-[#FFD875]/50 transition-all duration-300"
                          >
                            <div className="flex items-center justify-between">
                              <div className="space-y-2">
                                <div className="flex items-center gap-3">
                                  <div className="w-10 h-10 bg-[#FFD875] rounded-full flex items-center justify-center">
                                    <span className="text-slate-900 font-bold text-sm">
                                      {member.Full_Name?.charAt(0).toUpperCase()}
                                    </span>
                                  </div>
                                  <div>
                                    <p className="text-white font-semibold text-lg">{member.Full_Name}</p>
                                    <div className="flex items-center gap-4 text-sm">
                                      <span className="text-gray-300 flex items-center gap-1">
                                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                          <path
                                            strokeLinecap="round"
                                            strokeLinejoin="round"
                                            strokeWidth={2}
                                            d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"
                                          />
                                        </svg>
                                        {member.Phone_Number}
                                      </span>
                                      <span className="text-gray-300 flex items-center gap-1">
                                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                          <path
                                            strokeLinecap="round"
                                            strokeLinejoin="round"
                                            strokeWidth={2}
                                            d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207"
                                          />
                                        </svg>
                                        {member.Email}
                                      </span>
                                    </div>
                                  </div>
                                </div>
                                {member.points !== undefined && (
                                  <div className="flex items-center gap-2 mt-2">
                                    <div className="px-3 py-1 bg-[#FFD875]/20 border border-[#FFD875]/30 rounded-full">
                                      <span className="text-[#FFD875] text-sm font-medium">
                                        ‚≠ê {member.points.toLocaleString("vi-VN")} ƒëi·ªÉm
                                      </span>
                                    </div>
                                  </div>
                                )}
                              </div>
                              <button
                                onClick={async () => {
                                  setSelectedMember(member);
                                  setUserPoints(member.points || 0);

                                  // T·ª± ƒë·ªông li√™n k·∫øt booking v·ªõi member
                                  try {
                                    await linkBookingToMember(member.User_ID, member);
                                    toast.success("ƒê√£ li√™n k·∫øt ƒë∆°n h√†ng v·ªõi th√†nh vi√™n!");
                                  } catch (error) {
                                    console.error("L·ªói li√™n k·∫øt booking:", error);
                                    toast.error("Kh√¥ng th·ªÉ li√™n k·∫øt ƒë∆°n h√†ng");
                                  }
                                }}
                                className="px-6 py-3 bg-[#FFD875] hover:bg-[#FFA500] text-slate-900 font-semibold rounded-xl transition-all duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5"
                              >
                                Ch·ªçn kh√°ch h√†ng
                              </button>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}

                  {/* Selected Member Display */}
                  {selectedMember && (
                    <div className="bg-[#FFD875]/10 border border-[#FFD875]/30 rounded-lg p-4">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-3">
                          <div className="w-8 h-8 bg-[#FFD875] rounded-full flex items-center justify-center">
                            <svg
                              className="w-4 h-4 text-slate-900"
                              fill="none"
                              stroke="currentColor"
                              viewBox="0 0 24 24"
                            >
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                            </svg>
                          </div>
                          <div>
                            <div className="flex items-center gap-2 mb-1">
                              <span className="text-white font-medium">
                                {selectedMember.Full_Name || selectedMember.Email}
                              </span>
                              <div className="px-2 py-1 bg-[#FFD875]/20 rounded-md">
                                <span className="text-[#FFD875] text-xs font-medium">ƒê√£ ch·ªçn</span>
                              </div>
                            </div>
                            <div className="flex items-center gap-3 text-sm">
                              <span className="text-gray-400 flex items-center gap-1">
                                <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path
                                    strokeLinecap="round"
                                    strokeLinejoin="round"
                                    strokeWidth={2}
                                    d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"
                                  />
                                </svg>
                                {selectedMember.Phone_Number}
                              </span>
                              <span className="text-gray-400 flex items-center gap-1">
                                <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path
                                    strokeLinecap="round"
                                    strokeLinejoin="round"
                                    strokeWidth={2}
                                    d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207"
                                  />
                                </svg>
                                {selectedMember.Email}
                              </span>
                            </div>
                          </div>
                        </div>
                        <button
                          onClick={() => {
                            setSelectedMember(null);
                            setUserPoints(0);
                          }}
                          className="p-2 text-gray-400 hover:text-white hover:bg-gray-700 rounded-lg transition-colors"
                          title="B·ªè ch·ªçn kh√°ch h√†ng"
                        >
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path
                              strokeLinecap="round"
                              strokeLinejoin="round"
                              strokeWidth={2}
                              d="M6 18L18 6M6 6l12 12"
                            />
                          </svg>
                        </button>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            )}

            {/* Promo Code Section - Hi·ªÉn th·ªã cho user th∆∞·ªùng ho·∫∑c staff c√≥ member ƒë∆∞·ª£c ch·ªçn */}
            {(!["Staff", "Admin", "Manager"].includes(user?.role || user?.Role) || selectedMember) && (
              <div className="bg-gradient-to-br from-slate-800/80 to-slate-900/80 backdrop-blur-xl rounded-3xl p-8 border border-slate-700/30 shadow-2xl">
                <div className="flex items-center gap-3 mb-8">
                  <svg className="w-6 h-6 text-[#FFD875]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"
                    />
                  </svg>
                  <h3 className="text-2xl font-bold bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent">
                    M√£ gi·∫£m gi√°
                  </h3>
                </div>

                <div className="flex gap-3 mb-4">
                  <input
                    type="text"
                    value={promoCode}
                    onChange={(e) => setPromoCode(e.target.value.toUpperCase())}
                    placeholder="Nh·∫≠p m√£ gi·∫£m gi√°"
                    className="flex-1 px-4 py-3 bg-slate-700/70 border border-slate-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#FFD875] text-white placeholder-gray-400"
                  />
                  <button
                    onClick={handleApplyPromoCode}
                    disabled={!promoCode.trim() || isProcessing || isApplyingPromo}
                    className="px-6 py-3 bg-[#FFD875] hover:bg-[#FFA500] text-slate-900 font-medium rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {isApplyingPromo ? "ƒêang x·ª≠ l√Ω..." : "√Åp d·ª•ng"}
                  </button>
                </div>

                {/* Dropdown m√£ khuy·∫øn m√£i ph√π h·ª£p */}
                {(() => {
                  const shouldShow = availablePromotions.length > 0 && !appliedDiscount;
                  return shouldShow;
                })() && (
                  <div className="mb-4">
                    <button
                      onClick={() => setShowPromotionDropdown(!showPromotionDropdown)}
                      className="flex items-center gap-2 text-[#FFD875] hover:text-[#FFA500] text-sm font-medium transition-colors"
                    >
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                      </svg>
                      M√£ khuy·∫øn m√£i ph√π h·ª£p ({availablePromotions.length})
                    </button>

                    {showPromotionDropdown && (
                      <div className="mt-3 bg-slate-700/50 border border-slate-600 rounded-lg max-h-48 overflow-y-auto">
                        {availablePromotions.map((promo) => (
                          <div
                            key={promo.id}
                            className="p-3 border-b border-slate-600/50 last:border-b-0 hover:bg-slate-600/30 transition-colors"
                          >
                            <div className="flex items-center justify-between">
                              <div className="flex-1">
                                <div className="flex items-center gap-2 mb-1">
                                  <span className="font-mono text-[#FFD875] font-medium">{promo.code}</span>
                                  {promo.isCurrentlyApplied && (
                                    <span className="text-xs bg-green-500/20 text-green-400 px-2 py-1 rounded">
                                      ƒêang √°p d·ª•ng
                                    </span>
                                  )}
                                </div>
                                <div className="text-sm text-gray-300 mb-1">{promo.title}</div>
                                <div className="text-xs text-[#FFD875]">
                                  Gi·∫£m {promo.discountAmount?.toLocaleString("vi-VN")}ƒë
                                </div>
                              </div>
                              <div className="flex items-center gap-2">
                                {promo.isCurrentlyApplied ? (
                                  <button
                                    onClick={handleRemovePromotion}
                                    disabled={isApplyingPromo}
                                    className="p-2 text-red-400 hover:text-red-300 hover:bg-red-500/10 rounded-lg transition-colors disabled:opacity-50"
                                    title="X√≥a m√£"
                                  >
                                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                      <path
                                        strokeLinecap="round"
                                        strokeLinejoin="round"
                                        strokeWidth={2}
                                        d="M6 18L18 6M6 6l12 12"
                                      />
                                    </svg>
                                  </button>
                                ) : (
                                  <button
                                    onClick={() => handleApplyPromotionFromDropdown(promo.code)}
                                    disabled={isApplyingPromo}
                                    className="px-3 py-1 bg-[#FFD875] hover:bg-[#FFA500] text-slate-900 text-xs font-medium rounded transition-colors disabled:opacity-50"
                                  >
                                    {isApplyingPromo ? "..." : "√Åp d·ª•ng"}
                                  </button>
                                )}
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                )}

                {promoError && <div className="text-red-400 text-sm mb-4">{promoError}</div>}

                {appliedDiscount > 0 && (
                  <div className="bg-[#FFD875]/20 border border-[#FFD875]/50 rounded-lg p-3 text-[#FFD875] text-sm flex items-center justify-between">
                    <span>‚úÖ ƒê√£ √°p d·ª•ng m√£ gi·∫£m gi√°: -{appliedDiscount.toLocaleString("vi-VN")}ƒë</span>
                    <button
                      onClick={handleRemovePromotion}
                      disabled={isApplyingPromo}
                      className="p-1 text-[#FFD875] hover:text-[#FFA500] transition-colors disabled:opacity-50"
                      title="X√≥a m√£ gi·∫£m gi√°"
                    >
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                      </svg>
                    </button>
                  </div>
                )}
              </div>
            )}

            {/* Points Section - Hi·ªÉn th·ªã cho user th∆∞·ªùng ho·∫∑c staff c√≥ member ƒë∆∞·ª£c ch·ªçn */}
            {(!["Staff", "Admin", "Manager"].includes(user?.role || user?.Role) || selectedMember) && (
              <div className="bg-gradient-to-br from-slate-800/80 to-slate-900/80 backdrop-blur-xl rounded-3xl p-8 border border-slate-700/30 shadow-2xl">
                <div className="flex items-center gap-3 mb-8">
                  <svg className="w-6 h-6 text-[#FFD875]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"
                    />
                  </svg>
                  <h3 className="text-2xl font-bold bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent">
                    S·ª≠ d·ª•ng ƒëi·ªÉm t√≠ch l≈©y
                  </h3>
                </div>

                <div className="mb-6">
                  <div className="bg-gradient-to-r from-amber-500/20 to-orange-500/20 border border-amber-500/30 rounded-2xl p-6">
                    <div className="flex items-center justify-between mb-4">
                      <div className="flex items-center gap-3">
                        <div className="w-8 h-8 bg-[#FFD875] rounded-lg flex items-center justify-center">
                          <span className="text-slate-900 font-bold text-sm">‚≠ê</span>
                        </div>
                        <div>
                          <p className="text-white font-semibold">
                            {selectedMember ? `ƒêi·ªÉm c·ªßa ${selectedMember.Full_Name}` : "ƒêi·ªÉm hi·ªán c√≥"}
                          </p>
                          <p className="text-[#FFD875] text-sm">1 ƒëi·ªÉm = 1 VND</p>
                        </div>
                      </div>
                      <div className="text-right">
                        {isLoadingPoints ? (
                          <div className="flex items-center gap-2">
                            <div className="animate-spin h-4 w-4 border-2 border-[#FFD875] border-t-transparent rounded-full"></div>
                            <span className="text-gray-400">ƒêang t·∫£i...</span>
                          </div>
                        ) : (
                          <div className="text-2xl font-bold text-[#FFD875]">
                            {userPoints.toLocaleString("vi-VN") || 0}
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                </div>

                <div className="relative mb-6">
                  <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                    <svg className="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"
                      />
                    </svg>
                  </div>
                  <input
                    type="text"
                    value={pointsToUse}
                    onChange={(e) => {
                      // Ch·ªâ cho ph√©p nh·∫≠p s·ªë
                      const value = e.target.value.replace(/[^0-9]/g, "");
                      setPointsToUse(value);
                    }}
                    placeholder="Nh·∫≠p s·ªë ƒëi·ªÉm mu·ªën s·ª≠ d·ª•ng..."
                    className="w-full pl-12 pr-32 py-4 bg-slate-700/50 border border-slate-600/50 rounded-2xl focus:outline-none focus:ring-2 focus:ring-[#FFD875]/50 focus:border-[#FFD875]/50 text-white placeholder-gray-400 transition-all duration-300"
                  />
                  <button
                    onClick={handleApplyPoints}
                    disabled={!pointsToUse.trim() || isProcessing}
                    className="absolute right-2 top-2 bottom-2 px-6 bg-[#FFD875] hover:bg-[#FFA500] text-slate-900 font-semibold rounded-xl transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2 shadow-lg"
                  >
                    {isProcessing ? (
                      <>
                        <div className="animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full"></div>
                        <span className="hidden sm:inline">ƒêang x·ª≠ l√Ω...</span>
                      </>
                    ) : (
                      <span>S·ª≠ d·ª•ng ƒëi·ªÉm</span>
                    )}
                  </button>
                </div>

                {pointsError && <div className="text-red-400 text-sm mb-4">{pointsError}</div>}

                {appliedPointsValue > 0 && (
                  <div className="bg-[#FFD875]/20 border border-[#FFD875]/50 rounded-lg p-3 text-[#FFD875] text-sm flex items-center justify-between">
                    <span>
                      ‚úÖ ƒê√£ s·ª≠ d·ª•ng {appliedPointsValue.toLocaleString("vi-VN")} ƒëi·ªÉm: -
                      {appliedPointsValue.toLocaleString("vi-VN")}ƒë
                    </span>
                    <button
                      onClick={handleRemovePoints}
                      disabled={isProcessing}
                      className="ml-3 p-1 text-red-400 hover:text-red-300 hover:bg-red-500/10 rounded-lg transition-colors disabled:opacity-50"
                      title="X√≥a ƒëi·ªÉm ƒë√£ s·ª≠ d·ª•ng"
                    >
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M6 18L18 6M6 6l12 12"
                        />
                      </svg>
                    </button>
                  </div>
                )}
              </div>
            )}
          </div>

          {/* Right Column - Order Summary */}
          <div className="lg:col-span-1">
            <div className="bg-gradient-to-br from-slate-800/80 to-slate-900/80 backdrop-blur-xl rounded-3xl p-6 border border-slate-700/30 shadow-2xl sticky top-24">
              <h3 className="text-xl font-bold text-[#FFD875] mb-6">Th√¥ng tin ƒë∆°n h√†ng</h3>

              {/* Movie Info - Compact */}
              <div className="mb-6 pb-4 border-b border-slate-700/50">
                {isLoadingMovie ? (
                  <div className="flex items-center justify-center py-4">
                    <div className="animate-spin h-5 w-5 border-2 border-[#FFD875] border-t-transparent rounded-full"></div>
                    <span className="ml-2 text-gray-400 text-sm">ƒêang t·∫£i...</span>
                  </div>
                ) : (
                  <div className="flex items-start gap-3">
                    {/* Movie Poster */}
                    {(movie?.poster_url || movie?.poster || movie?.image || movie?.Image || movie?.Poster_URL) && (
                      <div className="flex-shrink-0">
                        <img
                          src={movie.poster_url || movie.poster || movie.image || movie.Image || movie.Poster_URL}
                          alt={movie?.title || movie?.Title || "Movie Poster"}
                          className="w-12 h-16 object-cover rounded-lg border border-slate-600/50"
                          onError={(e) => {
                            e.currentTarget.style.display = "none";
                          }}
                        />
                      </div>
                    )}

                    {/* Movie Details */}
                    <div className="flex-1 min-w-0">
                      <h4 className="font-bold text-white text-base truncate">
                        {movie?.title || movie?.Title || "ƒêang t·∫£i..."}
                      </h4>
                      <p className="text-gray-400 text-sm mt-1">Galaxy Cinema</p>
                      <div className="flex items-center gap-2 mt-2 text-sm">
                        <span className="text-[#FFD875]">{showtime?.Show_Date || "ƒêang t·∫£i..."}</span>
                        <span className="text-gray-500">‚Ä¢</span>
                        <span className="text-[#FFD875]">{showtime?.Start_Time || "ƒêang t·∫£i..."}</span>
                      </div>
                      {showtime?.Room_Name && <p className="text-gray-400 text-sm mt-1">{showtime.Room_Name}</p>}
                    </div>
                  </div>
                )}
              </div>

              {/* Seats - Compact */}
              <div className="mb-6 pb-4 border-b border-slate-700/50">
                <h4 className="font-semibold text-white text-sm mb-3">Gh·∫ø ƒë√£ ch·ªçn</h4>
                <div className="space-y-2">
                  {processedSeats?.map((seat, index) => (
                    <div key={index} className="flex justify-between items-center py-2">
                      <div className="flex items-center gap-2">
                        <div
                          className={`w-6 h-6 rounded flex items-center justify-center text-xs font-bold ${
                            seat.type === "vip" ? "bg-[#FFD875] text-slate-900" : "bg-slate-700 text-white"
                          }`}
                        >
                          {seat.row}
                          {seat.number}
                        </div>
                        <span className="text-white text-sm">{seat.type === "vip" ? "VIP" : "Th∆∞·ªùng"}</span>
                      </div>
                      <span className="text-[#FFD875] font-semibold text-sm">
                        {(seat.price || 90000).toLocaleString("vi-VN")}ƒë
                      </span>
                    </div>
                  ))}
                </div>
              </div>

              {/* Payment Methods - Ch·ªâ hi·ªÉn th·ªã cho Staff/Admin/Manager */}
              {["Staff", "Admin", "Manager"].includes(user?.role || user?.Role) && (
                <div className="bg-gradient-to-br from-slate-800/80 to-slate-900/80 backdrop-blur-xl rounded-3xl p-8 border border-slate-700/30 shadow-2xl">
                  <div className="flex items-center gap-3 mb-8">
                    <LockClosedIcon className="w-6 h-6 text-[#FFD875]" />
                    <h3 className="text-2xl font-bold bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent">
                      Ph∆∞∆°ng th·ª©c thanh to√°n
                    </h3>
                  </div>

                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    {/* PayOS */}
                    <div
                      className={`group p-6 rounded-2xl border cursor-pointer transition-all duration-300 transform hover:-translate-y-1 ${
                        selectedPaymentMethod === "payos"
                          ? "border-[#FFD875]/50 bg-[#FFD875]/10 shadow-lg"
                          : "border-slate-600/50 hover:border-slate-500/50 bg-slate-700/30"
                      }`}
                      onClick={() => setSelectedPaymentMethod("payos")}
                    >
                      <div className="flex flex-col items-center text-center space-y-3">
                        <div
                          className={`w-12 h-12 rounded-2xl flex items-center justify-center transition-all duration-300 ${
                            selectedPaymentMethod === "payos"
                              ? "bg-[#FFD875] shadow-lg"
                              : "bg-[#FFD875]/70 group-hover:bg-[#FFD875]"
                          }`}
                        >
                          <QrCodeIcon
                            className={`w-6 h-6 ${
                              selectedPaymentMethod === "payos"
                                ? "text-slate-900"
                                : "text-slate-700 group-hover:text-slate-900"
                            }`}
                          />
                        </div>
                        <div>
                          <h5 className="font-semibold text-white">PayOS QR</h5>
                          <p className="text-sm text-gray-400">Qu√©t m√£ QR ƒë·ªÉ thanh to√°n</p>
                        </div>
                        <div
                          className={`w-5 h-5 rounded-full border-2 transition-all duration-300 ${
                            selectedPaymentMethod === "payos" ? "border-[#FFD875] bg-[#FFD875]" : "border-gray-400"
                          }`}
                        >
                          {selectedPaymentMethod === "payos" && (
                            <svg className="w-3 h-3 text-white m-0.5" fill="currentColor" viewBox="0 0 20 20">
                              <path
                                fillRule="evenodd"
                                d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                                clipRule="evenodd"
                              />
                            </svg>
                          )}
                        </div>
                      </div>
                    </div>

                    {/* Cash Payment */}
                    <div
                      className={`group p-6 rounded-2xl border cursor-pointer transition-all duration-300 transform hover:-translate-y-1 ${
                        selectedPaymentMethod === "cash"
                          ? "border-[#FFD875]/50 bg-[#FFD875]/10 shadow-lg"
                          : "border-slate-600/50 hover:border-slate-500/50 bg-slate-700/30"
                      }`}
                      onClick={() => setSelectedPaymentMethod("cash")}
                    >
                      <div className="flex flex-col items-center text-center space-y-3">
                        <div
                          className={`w-12 h-12 rounded-2xl flex items-center justify-center transition-all duration-300 ${
                            selectedPaymentMethod === "cash"
                              ? "bg-slate-700 shadow-lg"
                              : "bg-slate-700/70 group-hover:bg-slate-700"
                          }`}
                        >
                          <BanknotesIcon className="w-6 h-6 text-white" />
                        </div>
                        <div>
                          <h5 className="font-semibold text-white">Ti·ªÅn m·∫∑t</h5>
                          <p className="text-sm text-gray-400">Thanh to√°n t·∫°i qu·∫ßy</p>
                        </div>
                        <div
                          className={`w-5 h-5 rounded-full border-2 transition-all duration-300 ${
                            selectedPaymentMethod === "cash" ? "border-[#FFD875] bg-[#FFD875]" : "border-gray-400"
                          }`}
                        >
                          {selectedPaymentMethod === "cash" && (
                            <svg className="w-3 h-3 text-white m-0.5" fill="currentColor" viewBox="0 0 20 20">
                              <path
                                fillRule="evenodd"
                                d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                                clipRule="evenodd"
                              />
                            </svg>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {/* Price Breakdown - Compact */}
              <div className="space-y-2 text-sm mb-6">
                <div className="flex justify-between items-center">
                  <span className="text-gray-400">T·∫°m t√≠nh</span>
                  <span className="text-white">{subtotal.toLocaleString("vi-VN")}ƒë</span>
                </div>

                {appliedDiscount > 0 && (
                  <div className="flex justify-between items-center">
                    <span className="text-gray-400">Gi·∫£m gi√°</span>
                    <span className="text-[#FFD875]">-{appliedDiscount.toLocaleString("vi-VN")}ƒë</span>
                  </div>
                )}

                {appliedPointsValue > 0 && (
                  <div className="flex justify-between items-center">
                    <span className="text-gray-400">ƒêi·ªÉm t√≠ch l≈©y</span>
                    <span className="text-[#FFD875]">-{appliedPointsValue.toLocaleString("vi-VN")}ƒë</span>
                  </div>
                )}

                <div className="border-t border-slate-600/50 pt-3 mt-3">
                  <div className="flex justify-between items-center">
                    <span className="text-white font-semibold">T·ªïng c·ªông</span>
                    <span className="text-xl font-bold text-[#FFD875]">{total.toLocaleString("vi-VN")}ƒë</span>
                  </div>
                </div>
              </div>

              {/* Payment Button */}
              <div className="relative">
                <button
                  onClick={handlePayment}
                  disabled={
                    (["Staff", "Admin", "Manager"].includes(user?.role || user?.Role) && !selectedPaymentMethod) ||
                    isProcessing ||
                    isExpired
                  }
                  className="group w-full bg-[#FFD875] hover:bg-[#FFA500] text-slate-900 font-bold py-6 px-8 rounded-2xl transition-all duration-300 transform hover:scale-105 hover:shadow-2xl disabled:opacity-50 disabled:transform-none disabled:cursor-not-allowed shadow-xl relative overflow-hidden"
                >
                  {/* Animated background */}
                  <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent -skew-x-12 transform -translate-x-full group-hover:translate-x-full transition-transform duration-1000"></div>

                  <div className="relative flex items-center justify-center gap-3">
                    {isProcessing ? (
                      <>
                        <div className="animate-spin h-6 w-6 border-3 border-white border-t-transparent rounded-full"></div>
                        <span className="text-lg">ƒêang x·ª≠ l√Ω thanh to√°n...</span>
                      </>
                    ) : isExpired ? (
                      <>
                        <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth={2}
                            d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                          />
                        </svg>
                        <span className="text-lg">H·∫øt th·ªùi gian thanh to√°n</span>
                      </>
                    ) : !["Staff", "Admin", "Manager"].includes(user?.role || user?.Role) ? (
                      <>
                        <div className="w-8 h-8 bg-slate-900/20 rounded-lg flex items-center justify-center">
                          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path
                              strokeLinecap="round"
                              strokeLinejoin="round"
                              strokeWidth={2}
                              d="M12 4v1m6 11h2m-6 0h-2v4m0-11v3m0 0h.01M12 12h4.01M16 16h4m-4 0v4m-4-4h4m-4 0v4"
                            />
                          </svg>
                        </div>
                        <div className="text-center">
                          <div className="text-xl font-bold">Thanh to√°n PayOS</div>
                          <div className="text-lg opacity-90">{total.toLocaleString("vi-VN")}ƒë</div>
                        </div>
                      </>
                    ) : (
                      <>
                        <div className="w-8 h-8 bg-slate-900/20 rounded-lg flex items-center justify-center">
                          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path
                              strokeLinecap="round"
                              strokeLinejoin="round"
                              strokeWidth={2}
                              d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2zm7-5a2 2 0 11-4 0 2 2 0 014 0z"
                            />
                          </svg>
                        </div>
                        <div className="text-center">
                          <div className="text-xl font-bold">X√°c nh·∫≠n thanh to√°n</div>
                          <div className="text-lg opacity-90">{total.toLocaleString("vi-VN")}ƒë</div>
                        </div>
                      </>
                    )}
                  </div>
                </button>
              </div>

              {paymentError && (
                <div className="mt-6 p-4 bg-red-500/10 border border-red-500/30 rounded-2xl">
                  <div className="flex items-center gap-3">
                    <svg className="w-5 h-5 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                      />
                    </svg>
                    <span className="text-red-400 font-medium">{paymentError}</span>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* PayOS QR Modal */}
      {showQRModal && (
        <PayOSQRModal
          isOpen={showQRModal}
          onClose={() => setShowQRModal(false)}
          bookingId={bookingSession.bookingId || ""}
          onPaymentSuccess={(transactionId) => {
            setShowQRModal(false);
            onPaymentSuccess(bookingSession.bookingId || "", {
              success: true,
              transactionId,
              method: "PayOS",
            });
          }}
          amount={total}
          ticketInfo={processedSeats?.map((seat) => `${seat.row}${seat.number}`).join(", ")}
          skipConfirmation={true}
          isStaff={["Staff", "Admin", "Manager"].includes(user?.role || user?.Role)}
        />
      )}

      {/* Create Customer Modal */}
      {showCreateCustomerModal && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4">
          <div className="bg-slate-800 rounded-2xl p-6 w-full max-w-md border border-slate-700">
            <h3 className="text-xl font-bold text-white mb-6">T·∫°o t√†i kho·∫£n kh√°ch h√†ng</h3>

            <form
              onSubmit={async (e) => {
                e.preventDefault();
                const formData = new FormData(e.target as HTMLFormElement);
                const customerData = {
                  Full_Name: formData.get("fullName"),
                  Email: formData.get("email"),
                  Phone_Number: formData.get("phone"),
                  Address: formData.get("address"),
                  Date_Of_Birth: formData.get("dateOfBirth"),
                  Sex: formData.get("gender"),
                };

                try {
                  const result = await createNewCustomer(customerData);
                  console.log("üîç Create customer result:", result);

                  // Handle both old and new response formats
                  const isSuccess = result.success || (result.user && result.message);
                  const userData = result.data || result.user;

                  console.log("üîç Debug response parsing:", {
                    isSuccess,
                    userData,
                    userIdFromData: userData?.User_ID,
                    resultSuccess: result.success,
                    resultData: result.data,
                    resultUser: result.user
                  });

                  if (isSuccess && userData) {
                    toast.success("T·∫°o t√†i kho·∫£n th√†nh c√¥ng!");
                    setShowCreateCustomerModal(false);

                    // T·ª± ƒë·ªông ch·ªçn customer v·ª´a t·∫°o
                    setSelectedMember(userData);
                    console.log("üéØ ƒê√£ set selectedMember:", userData);

                    // T·ª± ƒë·ªông li√™n k·∫øt booking v·ªõi member m·ªõi t·∫°o
                    try {
                      console.log("üîó Chu·∫©n b·ªã g·ªçi linkBookingToMember v·ªõi User_ID:", userData.User_ID);
                      await linkBookingToMember(userData.User_ID, userData);
                      toast.success("ƒê√£ li√™n k·∫øt ƒë∆°n h√†ng v·ªõi kh√°ch h√†ng m·ªõi!");
                    } catch (linkError) {
                      console.error("L·ªói li√™n k·∫øt booking:", linkError);
                      toast.error("T·∫°o t√†i kho·∫£n th√†nh c√¥ng nh∆∞ng kh√¥ng th·ªÉ li√™n k·∫øt ƒë∆°n h√†ng");
                    }
                  } else {
                    console.error("‚ùå T·∫°o t√†i kho·∫£n th·∫•t b·∫°i:", { isSuccess, userData, result });
                    toast.error(result.message || "C√≥ l·ªói x·∫£y ra");
                  }
                } catch (error: any) {
                  console.error("‚ùå Create customer error:", error);
                  toast.error(error?.response?.data?.message || "C√≥ l·ªói x·∫£y ra khi t·∫°o t√†i kho·∫£n");
                }
              }}
              className="space-y-4"
            >
              <div>
                <label className="block text-gray-300 text-sm font-medium mb-2">H·ªç v√† t√™n *</label>
                <input
                  type="text"
                  name="fullName"
                  required
                  className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-[#FFD875]"
                />
              </div>

              <div>
                <label className="block text-gray-300 text-sm font-medium mb-2">Email *</label>
                <input
                  type="email"
                  name="email"
                  required
                  className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-[#FFD875]"
                />
              </div>

              <div>
                <label className="block text-gray-300 text-sm font-medium mb-2">S·ªë ƒëi·ªán tho·∫°i *</label>
                <input
                  type="tel"
                  name="phone"
                  required
                  className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-[#FFD875]"
                />
              </div>

              <div>
                <label className="block text-gray-300 text-sm font-medium mb-2">ƒê·ªãa ch·ªâ</label>
                <input
                  type="text"
                  name="address"
                  className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-[#FFD875]"
                />
              </div>

              <div>
                <label className="block text-gray-300 text-sm font-medium mb-2">Ng√†y sinh</label>
                <input
                  type="date"
                  name="dateOfBirth"
                  className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-[#FFD875]"
                />
              </div>

              <div>
                <label className="block text-gray-300 text-sm font-medium mb-2">Gi·ªõi t√≠nh</label>
                <select
                  name="gender"
                  className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-[#FFD875]"
                >
                  <option value="">Ch·ªçn gi·ªõi t√≠nh</option>
                  <option value="Male">Nam</option>
                  <option value="Female">N·ªØ</option>
                  <option value="Other">Kh√°c</option>
                </select>
              </div>

              <div className="flex gap-3 pt-4">
                <button
                  type="button"
                  onClick={() => setShowCreateCustomerModal(false)}
                  className="flex-1 px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white rounded-lg transition-colors"
                >
                  H·ªßy
                </button>
                <button
                  type="submit"
                  className="flex-1 px-4 py-2 bg-[#FFD875] hover:bg-[#FFA500] text-slate-900 font-medium rounded-lg transition-colors"
                >
                  T·∫°o t√†i kho·∫£n
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default PaymentComponent;