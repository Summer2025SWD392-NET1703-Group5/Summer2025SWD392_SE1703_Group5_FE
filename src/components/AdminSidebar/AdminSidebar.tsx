import React, { useState } from "react";
import { Link, useLocation, useNavigate } from "react-router-dom"; // Th√™m useNavigate
import "./AdminSidebar.css";
import Logo from "../../assets/images/Logo.png";
import { useAuth } from "../../pages/context/AuthContext"; // Import useAuth t·ª´ AuthContext

interface SidebarItem {
  id: string;
  label: string;
  icon: string;
  path: string;
  subItems?: SidebarItem[];
}

const AdminSidebar: React.FC = () => {
  const location = useLocation();
  const navigate = useNavigate(); // Kh·ªüi t·∫°o useNavigate
  const { logout } = useAuth(); // L·∫•y h√†m logout t·ª´ AuthContext
  const [expandedItems, setExpandedItems] = useState<string[]>([]);
  const [isCollapsed, setIsCollapsed] = useState(false);

  const sidebarItems: SidebarItem[] = [
    {
      id: "dashboard",
      label: "B·∫£ng ƒêi·ªÅu Khi·ªÉn",
      icon: "üìä",
      path: "/admin/dashboard",
    },
    {
      id: "users",
      label: "Qu·∫£n L√Ω Ng∆∞·ªùi D√πng",
      icon: "üë•",
      path: "/admin/users",
    },
   
    {
      id: "cinemas",
      label: "Qu·∫£n L√Ω Chi Nh√°nh R·∫°p",
      icon: "üè¢",
      path: "/admin/cinemas",
    },
   
    {
      id: "bookings",
      label: "Qu·∫£n L√Ω ƒê·∫∑t V√©",
      icon: "üé´",
      path: "/admin/bookings",
      subItems: [
        {
          id: "all-bookings",
          label: "T·∫•t C·∫£ ƒê·∫∑t V√©",
          icon: "üìù",
          path: "/admin/bookings/all",
        },
        {
          id: "pending-bookings",
          label: "Ch·ªù X·ª≠ L√Ω",
          icon: "‚è≥",
          path: "/admin/bookings/pending",
        },
        {
          id: "cancelled-bookings",
          label: "ƒê√£ H·ªßy",
          icon: "‚ùå",
          path: "/admin/bookings/cancelled",
        },
      ],
    },
    {
      id: "reports",
      label: "B√°o C√°o & Ph√¢n T√≠ch",
      icon: "üìà",
      path: "/admin/reports",
      subItems: [
        {
          id: "revenue-report",
          label: "B√°o C√°o Doanh Thu",
          icon: "üí∞",
          path: "/admin/reports/revenue",
        },
        {
          id: "booking-analytics",
          label: "Ph√¢n T√≠ch ƒê·∫∑t V√©",
          icon: "üìä",
          path: "/admin/reports/bookings",
        },
        {
          id: "movie-performance",
          label: "Hi·ªáu Su·∫•t Phim",
          icon: "üéØ",
          path: "/admin/reports/movies",
        },
        {
          id: "user-analytics",
          label: "Ph√¢n T√≠ch Ng∆∞·ªùi D√πng",
          icon: "üë•",
          path: "/admin/reports/users",
        },
      ],
    },
    {
      id: "payments",
      label: "Qu·∫£n L√Ω Thanh To√°n",
      icon: "üí≥",
      path: "/admin/payments",
      subItems: [
        {
          id: "all-payments",
          label: "T·∫•t C·∫£ Thanh To√°n",
          icon: "üí∏",
          path: "/admin/payments/all",
        },
        {
          id: "refunds",
          label: "Ho√†n Ti·ªÅn",
          icon: "‚Ü©Ô∏è",
          path: "/admin/payments/refunds",
        },
        {
          id: "payment-methods",
          label: "Ph∆∞∆°ng Th·ª©c Thanh To√°n",
          icon: "üí≥",
          path: "/admin/payments/methods",
        },
      ],
    },
    {
      id: "promotions",
      label: "Khuy·∫øn M√£i & ∆Øu ƒê√£i",
      icon: "üéâ",
      path: "/admin/promotions",
      subItems: [
        {
          id: "all-promotions",
          label: "T·∫•t C·∫£ Khuy·∫øn M√£i",
          icon: "üè∑Ô∏è",
          path: "/admin/promotions/all",
        },
        {
          id: "add-promotion",
          label: "Th√™m Khuy·∫øn M√£i",
          icon: "‚ûï",
          path: "/admin/promotions/add",
        },
        {
          id: "coupons",
          label: "Phi·∫øu Gi·∫£m Gi√°",
          icon: "üéüÔ∏è",
          path: "/admin/promotions/coupons",
        },
      ],
    },
  ];

  const toggleExpanded = (itemId: string) => {
    setExpandedItems((prev) =>
      prev.includes(itemId)
        ? prev.filter((id) => id !== itemId)
        : [...prev, itemId]
    );
  };

  const isActiveItem = (path: string) => {
    return (
      location.pathname === path || location.pathname.startsWith(path + "/")
    );
  };

  const renderSidebarItem = (item: SidebarItem, isSubItem = false) => {
    const isActive = isActiveItem(item.path);
    const isExpanded = expandedItems.includes(item.id);
    const hasSubItems = item.subItems && item.subItems.length > 0;

    return (
      <li
        key={item.id}
        className={`sidebar-item ${isSubItem ? "sub-item" : ""}`}
      >
        <div
          className={`sidebar-link ${isActive ? "active" : ""} ${
            hasSubItems ? "has-submenu" : ""
          }`}
          onClick={() => (hasSubItems ? toggleExpanded(item.id) : undefined)}
        >
          {hasSubItems ? (
            <div className="sidebar-link-content">
              <div className="sidebar-link-main">
                <span className="sidebar-icon">{item.icon}</span>
                {!isCollapsed && (
                  <span className="sidebar-label">{item.label}</span>
                )}
              </div>
              {!isCollapsed && (
                <span className={`expand-icon ${isExpanded ? "expanded" : ""}`}>
                  ‚ñº
                </span>
              )}
            </div>
          ) : (
            <Link to={item.path} className="sidebar-link-content">
              <div className="sidebar-link-main">
                <span className="sidebar-icon">{item.icon}</span>
                {!isCollapsed && (
                  <span className="sidebar-label">{item.label}</span>
                )}
              </div>
            </Link>
          )}
        </div>

        {hasSubItems && isExpanded && !isCollapsed && (
          <ul className="sub-menu">
            {item.subItems!.map((subItem) => renderSidebarItem(subItem, true))}
          </ul>
        )}
      </li>
    );
  };

  // G·∫Øn h√†m logout v√†o n√∫t ƒëƒÉng xu·∫•t
  const handleLogoutClick = () => {
    logout(); // G·ªçi h√†m logout t·ª´ AuthContext
  };

  return (
    <div className={`admin-sidebar ${isCollapsed ? "collapsed" : ""}`}>
      {/* Ti√™u ƒë·ªÅ v·ªõi logo v√† n√∫t thu g·ªçn - ·∫©n khi thu g·ªçn */}
      {!isCollapsed && (
        <div className="sidebar-header">
          <div className="logo">
            <img src={Logo} alt="Logo Galaxy" className="logo-img" />
            <span className="logo-text">Galaxy</span>
          </div>
          <button
            className="collapse-btn"
            onClick={() => setIsCollapsed(!isCollapsed)}
            title="Thu g·ªçn thanh b√™n"
          >
            ‚ò∞
          </button>
        </div>
      )}

      {/* N√∫t m·ªü r·ªông khi thanh b√™n ƒë∆∞·ª£c thu g·ªçn */}
      {isCollapsed && (
        <div className="collapsed-header">
          <button
            className="expand-btn"
            onClick={() => setIsCollapsed(!isCollapsed)}
            title="M·ªü r·ªông thanh b√™n"
          >
            ‚ò∞
          </button>
        </div>
      )}

      <nav className="sidebar-nav">
        <ul className="sidebar-menu">
          {sidebarItems.map((item) => renderSidebarItem(item))}
        </ul>
      </nav>

      {/* Ch√¢n trang - ch·ªâ hi·ªÉn th·ªã ·∫£nh ƒë·∫°i di·ªán khi thu g·ªçn */}
      <div className="sidebar-footer">
        {!isCollapsed ? (
          <>
            <div className="admin-profile">
              <div className="profile-avatar">üë§</div>
              <div className="profile-info">
                <span className="profile-name">Ng∆∞·ªùi D√πng Qu·∫£n Tr·ªã</span>
                <span className="profile-role">Qu·∫£n Tr·ªã Vi√™n</span>
              </div>
            </div>
            <button
              className="logout-btn"
              title="ƒêƒÉng Xu·∫•t"
              onClick={handleLogoutClick}
            >
              <span className="logout-icon">üö™</span>
              <span>ƒêƒÉng Xu·∫•t</span>
            </button>
          </>
        ) : (
          <div className="collapsed-footer">
            <div className="profile-avatar-collapsed">üë§</div>
          </div>
        )}
      </div>
    </div>
  );
};

export default AdminSidebar;
