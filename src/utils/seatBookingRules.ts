// utils/seatBookingRules.ts
import type { Seat } from '../types';

export interface SeatValidationResult {
  isValid: boolean;
  reason: string;
  suggestedSeats?: string[];
}

export class SeatBookingRulesEngine {
  private seats: Seat[];
  private occupiedSeats: string[];
  private seatMap: Map<string, Seat>;
  private rowMap: Map<string, Seat[]>;

  constructor(seats: Seat[], occupiedSeats: string[] = []) {
    this.seats = seats;
    this.occupiedSeats = occupiedSeats;
    this.seatMap = new Map();
    this.rowMap = new Map();
    
    // T·∫°o map ƒë·ªÉ tra c·ª©u nhanh
    this.buildSeatMaps();
  }

  private buildSeatMaps(): void {
    console.log('üèóÔ∏è [SeatRules] Building seat maps...');
    
    this.seats.forEach(seat => {
      this.seatMap.set(seat.id, seat);
      
      if (!this.rowMap.has(seat.row)) {
        this.rowMap.set(seat.row, []);
      }
      this.rowMap.get(seat.row)!.push(seat);
    });

    // S·∫Øp x·∫øp gh·∫ø trong m·ªói h√†ng theo s·ªë gh·∫ø
    this.rowMap.forEach(rowSeats => {
      rowSeats.sort((a, b) => a.number - b.number);
    });

    console.log(`üèóÔ∏è [SeatRules] Built maps for ${this.seats.length} seats in ${this.rowMap.size} rows`);
  }

  /**
   * Ki·ªÉm tra xem vi·ªác ch·ªçn gh·∫ø c√≥ h·ª£p l·ªá kh√¥ng
   */
  public validateSeatSelection(seatId: string, currentSelectedSeats: string[]): SeatValidationResult {
    console.log(`üîç [SeatRules] Validating seat selection: ${seatId}`);
    console.log(`üîç [SeatRules] Current selected: [${currentSelectedSeats.join(', ')}]`);
    console.log(`üîç [SeatRules] Occupied seats: [${this.occupiedSeats.join(', ')}]`);

    const seat = this.seatMap.get(seatId);
    if (!seat) {
      return {
        isValid: false,
        reason: 'Gh·∫ø kh√¥ng t·ªìn t·∫°i'
      };
    }

    // T·∫°o danh s√°ch gh·∫ø s·∫Ω ƒë∆∞·ª£c ch·ªçn sau khi th√™m gh·∫ø m·ªõi
    const newSelectedSeats = [...currentSelectedSeats, seatId];
    
    // Ki·ªÉm tra quy t·∫Øc kh√¥ng ƒë·ªÉ l·∫°i gh·∫ø l·∫ª
    const violatesRule = this.checkIsolatedSeatRule(newSelectedSeats);
    
    if (violatesRule.hasViolation) {
      return {
        isValid: false,
        reason: violatesRule.reason,
        suggestedSeats: this.getSuggestedSeats(currentSelectedSeats)
      };
    }

    return {
      isValid: true,
      reason: 'H·ª£p l·ªá'
    };
  }

  /**
   * Ki·ªÉm tra quy t·∫Øc kh√¥ng ƒë·ªÉ l·∫°i gh·∫ø l·∫ª
   */
  private checkIsolatedSeatRule(selectedSeats: string[]): { hasViolation: boolean; reason: string } {
    console.log(`üîç [SeatRules] Checking isolated seat rule for: [${selectedSeats.join(', ')}]`);

    // T·∫°o set c√°c gh·∫ø ƒë√£ ƒë∆∞·ª£c ch·ªçn ho·∫∑c b·ªã chi·∫øm
    const unavailableSeats = new Set([...selectedSeats, ...this.occupiedSeats]);
    
    // Ki·ªÉm tra t·ª´ng h√†ng gh·∫ø
    for (const [rowId, rowSeats] of this.rowMap) {
      console.log(`üîç [SeatRules] Checking row ${rowId} with ${rowSeats.length} seats`);
      
      const violations = this.findIsolatedSeatsInRow(rowSeats, unavailableSeats);
      
      if (violations.length > 0) {
        const violatedSeatIds = violations.map(v => v.id).join(', ');
        console.log(`‚ùå [SeatRules] Found isolated seats in row ${rowId}: ${violatedSeatIds}`);
        
        return {
          hasViolation: true,
          reason: `Kh√¥ng th·ªÉ ch·ªçn gh·∫ø n√†y v√¨ s·∫Ω ƒë·ªÉ l·∫°i gh·∫ø l·∫ª (${violatedSeatIds}). Vui l√≤ng ch·ªçn gh·∫ø kh√°c ƒë·ªÉ tr√°nh ƒë·ªÉ l·∫°i gh·∫ø ƒë∆°n l·∫ª.`
        };
      }
    }

    console.log(`‚úÖ [SeatRules] No isolated seat violations found`);
    return { hasViolation: false, reason: '' };
  }

  /**
   * T√¨m gh·∫ø b·ªã c√¥ l·∫≠p trong m·ªôt h√†ng
   */
  private findIsolatedSeatsInRow(rowSeats: Seat[], unavailableSeats: Set<string>): Seat[] {
    const isolatedSeats: Seat[] = [];
    
    for (let i = 0; i < rowSeats.length; i++) {
      const seat = rowSeats[i];
      
      // B·ªè qua gh·∫ø ƒë√£ ƒë∆∞·ª£c ch·ªçn/chi·∫øm ho·∫∑c gh·∫ø ·∫©n
      if (unavailableSeats.has(seat.id) || seat.status === 'hidden' || seat.type === 'hidden') {
        continue;
      }

      // Ki·ªÉm tra gh·∫ø c√≥ b·ªã c√¥ l·∫≠p kh√¥ng
      const leftSeat = i > 0 ? rowSeats[i - 1] : null;
      const rightSeat = i < rowSeats.length - 1 ? rowSeats[i + 1] : null;
      
      const leftUnavailable = !leftSeat || 
        unavailableSeats.has(leftSeat.id) || 
        leftSeat.status === 'hidden' || 
        leftSeat.type === 'hidden';
        
      const rightUnavailable = !rightSeat || 
        unavailableSeats.has(rightSeat.id) || 
        rightSeat.status === 'hidden' || 
        rightSeat.type === 'hidden';

      // Gh·∫ø b·ªã c√¥ l·∫≠p n·∫øu c·∫£ hai b√™n ƒë·ªÅu kh√¥ng kh·∫£ d·ª•ng
      if (leftUnavailable && rightUnavailable) {
        isolatedSeats.push(seat);
        console.log(`üîç [SeatRules] Seat ${seat.id} is isolated (left: ${leftUnavailable}, right: ${rightUnavailable})`);
      }
    }
    
    return isolatedSeats;
  }

  /**
   * ƒê·ªÅ xu·∫•t gh·∫ø ph√π h·ª£p
   */
  private getSuggestedSeats(currentSelectedSeats: string[]): string[] {
    console.log(`üí° [SeatRules] Getting suggested seats for current selection: [${currentSelectedSeats.join(', ')}]`);
    
    const suggestions: string[] = [];
    const unavailableSeats = new Set([...currentSelectedSeats, ...this.occupiedSeats]);
    
    // T√¨m gh·∫ø li·ªÅn k·ªÅ v·ªõi gh·∫ø ƒë√£ ch·ªçn
    for (const selectedSeatId of currentSelectedSeats) {
      const selectedSeat = this.seatMap.get(selectedSeatId);
      if (!selectedSeat) continue;
      
      const rowSeats = this.rowMap.get(selectedSeat.row) || [];
      const seatIndex = rowSeats.findIndex(s => s.id === selectedSeatId);
      
      // Ki·ªÉm tra gh·∫ø b√™n tr√°i
      if (seatIndex > 0) {
        const leftSeat = rowSeats[seatIndex - 1];
        if (!unavailableSeats.has(leftSeat.id) && 
            leftSeat.status !== 'hidden' && 
            leftSeat.type !== 'hidden') {
          
          // Ki·ªÉm tra xem vi·ªác ch·ªçn gh·∫ø n√†y c√≥ t·∫°o ra gh·∫ø l·∫ª kh√¥ng
          const testSelection = [...currentSelectedSeats, leftSeat.id];
          const testResult = this.checkIsolatedSeatRule(testSelection);
          
          if (!testResult.hasViolation && !suggestions.includes(leftSeat.id)) {
            suggestions.push(leftSeat.id);
          }
        }
      }
      
      // Ki·ªÉm tra gh·∫ø b√™n ph·∫£i
      if (seatIndex < rowSeats.length - 1) {
        const rightSeat = rowSeats[seatIndex + 1];
        if (!unavailableSeats.has(rightSeat.id) && 
            rightSeat.status !== 'hidden' && 
            rightSeat.type !== 'hidden') {
          
          // Ki·ªÉm tra xem vi·ªác ch·ªçn gh·∫ø n√†y c√≥ t·∫°o ra gh·∫ø l·∫ª kh√¥ng
          const testSelection = [...currentSelectedSeats, rightSeat.id];
          const testResult = this.checkIsolatedSeatRule(testSelection);
          
          if (!testResult.hasViolation && !suggestions.includes(rightSeat.id)) {
            suggestions.push(rightSeat.id);
          }
        }
      }
    }
    
    console.log(`üí° [SeatRules] Suggested seats: [${suggestions.join(', ')}]`);
    return suggestions.slice(0, 5); // Gi·ªõi h·∫°n 5 ƒë·ªÅ xu·∫•t
  }

  /**
   * Ki·ªÉm tra xem c√≥ th·ªÉ ch·ªçn m·ªôt nh√≥m gh·∫ø li·ªÅn k·ªÅ kh√¥ng
   */
  public canSelectConsecutiveSeats(startSeatId: string, count: number): SeatValidationResult {
    const startSeat = this.seatMap.get(startSeatId);
    if (!startSeat) {
      return {
        isValid: false,
        reason: 'Gh·∫ø b·∫Øt ƒë·∫ßu kh√¥ng t·ªìn t·∫°i'
      };
    }

    const rowSeats = this.rowMap.get(startSeat.row) || [];
    const startIndex = rowSeats.findIndex(s => s.id === startSeatId);
    
    if (startIndex === -1) {
      return {
        isValid: false,
        reason: 'Kh√¥ng t√¨m th·∫•y gh·∫ø trong h√†ng'
      };
    }

    // Ki·ªÉm tra c√≥ ƒë·ªß gh·∫ø li·ªÅn k·ªÅ kh√¥ng
    if (startIndex + count > rowSeats.length) {
      return {
        isValid: false,
        reason: 'Kh√¥ng ƒë·ªß gh·∫ø li·ªÅn k·ªÅ trong h√†ng'
      };
    }

    // Ki·ªÉm tra t·∫•t c·∫£ gh·∫ø trong nh√≥m c√≥ kh·∫£ d·ª•ng kh√¥ng
    const seatsToSelect: string[] = [];
    for (let i = 0; i < count; i++) {
      const seat = rowSeats[startIndex + i];
      if (this.occupiedSeats.includes(seat.id) || 
          seat.status === 'hidden' || 
          seat.type === 'hidden') {
        return {
          isValid: false,
          reason: `Gh·∫ø ${seat.id} kh√¥ng kh·∫£ d·ª•ng`
        };
      }
      seatsToSelect.push(seat.id);
    }

    // Ki·ªÉm tra quy t·∫Øc gh·∫ø l·∫ª
    const ruleCheck = this.checkIsolatedSeatRule(seatsToSelect);
    if (ruleCheck.hasViolation) {
      return {
        isValid: false,
        reason: ruleCheck.reason
      };
    }

    return {
      isValid: true,
      reason: 'C√≥ th·ªÉ ch·ªçn nh√≥m gh·∫ø n√†y'
    };
  }
}
